"use strict";(self.webpackChunktunit_docs_site=self.webpackChunktunit_docs_site||[]).push([[6220],{1218:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>c,contentTitle:()=>o,default:()=>u,frontMatter:()=>a,metadata:()=>r,toc:()=>l});var s=n(4848),i=n(8453);const a={sidebar_position:2},o="Awaiting",r={id:"tutorial-assertions/awaiting",title:"Awaiting",description:"In TUnit, the await keyword is responsible for performing the assertion.",source:"@site/docs/tutorial-assertions/awaiting.md",sourceDirName:"tutorial-assertions",slug:"/tutorial-assertions/awaiting",permalink:"/TUnit/docs/tutorial-assertions/awaiting",draft:!1,unlisted:!1,tags:[],version:"current",sidebarPosition:2,frontMatter:{sidebar_position:2},sidebar:"tutorialSidebar",previous:{title:"Tutorial - Assertions",permalink:"/TUnit/docs/category/tutorial---assertions"},next:{title:"And Conditions",permalink:"/TUnit/docs/tutorial-assertions/and-conditions"}},c={},l=[];function d(e){const t={code:"code",h1:"h1",header:"header",p:"p",pre:"pre",...(0,i.R)(),...e.components};return(0,s.jsxs)(s.Fragment,{children:[(0,s.jsx)(t.header,{children:(0,s.jsx)(t.h1,{id:"awaiting",children:"Awaiting"})}),"\n",(0,s.jsxs)(t.p,{children:["In TUnit, the ",(0,s.jsx)(t.code,{children:"await"})," keyword is responsible for performing the assertion.\nBecause of this, your tests should be ",(0,s.jsx)(t.code,{children:"async"})," and return a ",(0,s.jsx)(t.code,{children:"Task"}),"."]}),"\n",(0,s.jsxs)(t.p,{children:["Don't worry about forgetting to ",(0,s.jsx)(t.code,{children:"await"})," - There's an analyzer built in that will notify you if you've missed any!"]}),"\n",(0,s.jsx)(t.p,{children:"This will error:"}),"\n",(0,s.jsx)(t.pre,{children:(0,s.jsx)(t.code,{className:"language-csharp",children:"    [Test]\n    public void MyTest()\n    {\n        var result = Add(1, 2);\n\n        Assert.That(result).Is.EqualTo(3);\n    }\n"})}),"\n",(0,s.jsx)(t.p,{children:"This won't:"}),"\n",(0,s.jsx)(t.pre,{children:(0,s.jsx)(t.code,{className:"language-csharp",children:"    [Test]\n    public async Task MyTest()\n    {\n        var result = Add(1, 2);\n\n        await Assert.That(result).Is.EqualTo(3);\n    }\n"})}),"\n",(0,s.jsxs)(t.p,{children:["TUnit is able to take in asynchronous delegates. To be able to assert on these, we need to execute the code. We want to avoid sync-over-async, as this can cause problems and block the thread pool, slowing down your test suite.\nAnd with how fast .NET has become, the overhead of ",(0,s.jsx)(t.code,{children:"Task"}),"s and ",(0,s.jsx)(t.code,{children:"async"})," methods shouldn't be noticable."]}),"\n",(0,s.jsxs)(t.p,{children:["The only time an assertion doesn't have to be awaited is when it's within an ",(0,s.jsx)(t.code,{children:"Assert.Multiple"})," block. But that multiple block must be awaited instead:"]}),"\n",(0,s.jsx)(t.pre,{children:(0,s.jsx)(t.code,{className:"language-csharp",children:"    [Test]\n    public async Task MyTest()\n    {\n        var result = Add(1, 2);\n\n        await Assert.Multiple(() =>\n        {\n            Assert.That(result).Is.Positive();\n            Assert.That(result).Is.EqualTo(3);\n        });\n    }\n"})})]})}function u(e={}){const{wrapper:t}={...(0,i.R)(),...e.components};return t?(0,s.jsx)(t,{...e,children:(0,s.jsx)(d,{...e})}):d(e)}},8453:(e,t,n)=>{n.d(t,{R:()=>o,x:()=>r});var s=n(6540);const i={},a=s.createContext(i);function o(e){const t=s.useContext(a);return s.useMemo((function(){return"function"==typeof e?e(t):{...t,...e}}),[t,e])}function r(e){let t;return t=e.disableParentContext?"function"==typeof e.components?e.components(i):e.components||i:o(e.components),s.createElement(a.Provider,{value:t},e.children)}}}]);