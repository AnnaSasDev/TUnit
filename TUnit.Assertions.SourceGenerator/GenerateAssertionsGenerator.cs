// ---------------------------------------------------------------------------------------------------------------------
// Imports
// ---------------------------------------------------------------------------------------------------------------------
using Microsoft.CodeAnalysis;
using Microsoft.CodeAnalysis.CSharp.Syntax;

namespace TUnit.Assertions.SourceGenerator;

// ---------------------------------------------------------------------------------------------------------------------
// Code
// ---------------------------------------------------------------------------------------------------------------------
[Generator(LanguageNames.CSharp)]
public class GenerateAssertionsGenerator : IIncrementalGenerator  {
    public void Initialize(IncrementalGeneratorInitializationContext context) {
        var classDeclarations = context.SyntaxProvider
            .CreateSyntaxProvider(
                predicate: (s, _) => s is ClassDeclarationSyntax,
                GenerateAssertionDtoFactory.Create)
            .Where(dto => dto is not null);
        
        context.RegisterSourceOutput(classDeclarations, 
            (spc, dto) => {
                if (dto == null) return;
                
                string source = $$"""
                    // <auto-generated/>
                    namespace {{dto.Namespace}} {
                        public partial class {{dto.ClassName}} {
                        }
                    }
                    """;
            
                spc.AddSource($"{dto.ClassName}.g.cs", source);

            });

    }
}
