// ---------------------------------------------------------------------------------------------------------------------
// Imports
// ---------------------------------------------------------------------------------------------------------------------
using Microsoft.CodeAnalysis;
using Microsoft.CodeAnalysis.CSharp.Syntax;
using System.Collections.Immutable;
using System.Text;

namespace TUnit.Assertions.SourceGenerator;

// ---------------------------------------------------------------------------------------------------------------------
// Code
// ---------------------------------------------------------------------------------------------------------------------
[Generator(LanguageNames.CSharp)]
public class GenerateAssertionsGenerator : IIncrementalGenerator  {
    public void Initialize(IncrementalGeneratorInitializationContext context) {
        IncrementalValueProvider<ImmutableArray<GenerateAssertionDto>> data = context.SyntaxProvider
            .CreateSyntaxProvider(
                predicate: (s, _) => s is ClassDeclarationSyntax,
                GenerateAssertionDtoFactory.Create)
            .Where(dto => dto is not null && !dto.IsEmpty)
            .Collect()!;
        
        context.RegisterSourceOutput(context.CompilationProvider.Combine(data), 
            static (SourceProductionContext spc, (Compilation Compilation, ImmutableArray<GenerateAssertionDto> DtoArray) box) => {
                Compilation compilation = box.Compilation;
                ImmutableArray<GenerateAssertionDto> dtoArray = box.DtoArray;
                var builder = new StringBuilder();

                foreach (GenerateAssertionDto dto in dtoArray) {
                    builder.AppendLine("// <auto-generated/>");
                    builder.AppendLine("using TUnit.Assertions.Extensions;");
                    builder.AppendLine("using TUnit.Assertions.AssertConditions;");
                    builder.AppendLine("using TUnit.Assertions.AssertConditions.Interfaces;");
                    builder.AppendLine("using TUnit.Assertions.AssertionBuilders;");
                    builder.AppendLine("using TUnit.Assertions.AssertionBuilders.Wrappers;");
                    builder.AppendLine($"namespace {dto.Namespace}");
                    builder.AppendLine("{");
                    builder.AppendLine($"    public static partial class {dto.ClassName}");
                    builder.AppendLine("    {");
            
                    // Generate Is assertions
                    foreach (AttributeData isAssertion in dto.IsAssertions)
                    {
                        AssertionMethodDto? methodDto = AssertionMethodDto.FromIsAssertion(dto, isAssertion);
                        if (methodDto is null) continue;

                        builder.AppendLine($$"""
                                    public static InvokableValueAssertionBuilder<{{methodDto.TypeName}}> {{methodDto.MethodName}}(this IValueSource<{{methodDto.TypeName}}> valueSource)
                                    {
                                        return valueSource.RegisterAssertion(new FuncValueAssertCondition<{{methodDto.TypeName}}, int>(0,
                                            (value, _, self) =>
                                            {
                                                {{methodDto.NullCheck}}
                                                return {{methodDto.TypeName}}.{{methodDto.MethodName}}(value);
                                            },
                                            (s, _, _) => $"{{methodDto.ActualMessage}}",
                                            $"{{methodDto.ExpectedMessage}}")
                                            , []
                                        ); 
                                    }
                                    
                            """);
                    }
                    // Generate IsNot assertions
                    foreach (AttributeData isNotAssertion in dto.IsNotAssertions)
                    {
                        string? methodName = isNotAssertion.ConstructorArguments[0].Value?.ToString();
                        if (string.IsNullOrEmpty(methodName)) continue;
                
                        builder.AppendLine($"        public void {methodName}()");
                        builder.AppendLine("        {");
                        // TODO Assertion Logic
                        builder.AppendLine("        }");
                    }
            
                    builder.AppendLine("    }");
                    builder.AppendLine("}");
            
                    // spc.AddSource($"GenerateAssertionsGenerator.{dto.Namespace}.{dto.ClassName}.g.cs", builder.ToString());
                    spc.AddSource($"{dto.Namespace}.{dto.ClassName}.g.cs", builder.ToString());
                    builder.Clear();
                }
            });

    }
}
