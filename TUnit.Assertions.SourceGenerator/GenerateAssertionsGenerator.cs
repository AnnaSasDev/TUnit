// ---------------------------------------------------------------------------------------------------------------------
// Imports
// ---------------------------------------------------------------------------------------------------------------------
using Microsoft.CodeAnalysis;
using Microsoft.CodeAnalysis.CSharp.Syntax;

namespace TUnit.Assertions.SourceGenerator;

// ---------------------------------------------------------------------------------------------------------------------
// Code
// ---------------------------------------------------------------------------------------------------------------------
[Generator(LanguageNames.CSharp)]
public class GenerateAssertionsGenerator : IIncrementalGenerator  {
    public const string GenerateIsAssertionAttribute = "TUnit.Assertions.GenerateIsAssertionAttribute<TBase>";
    public const string GenerateIsNotAssertionAttribute = "TUnit.Assertions.GenerateIsNotAssertionAttribute<TBase>";

    public void Initialize(IncrementalGeneratorInitializationContext context) {
        var classDeclarations = context.SyntaxProvider
            .CreateSyntaxProvider(
                predicate: (s, _) => s is ClassDeclarationSyntax,
                transform: (ctx, _) => {
                    var classNode = (ClassDeclarationSyntax)ctx.Node;
                    SemanticModel semanticModel = ctx.SemanticModel;
                
                    // Get the symbol for detailed type information
                    ISymbol? classSymbol = semanticModel.GetDeclaredSymbol(classNode);
                    if (classSymbol == null) return null;

                    // Look for our attributes
                    var attributes = classSymbol.GetAttributes();
                    
                    bool hasIsAssertion = attributes
                        .Any(attr => attr.AttributeClass?.ToDisplayString() == GenerateIsAssertionAttribute);
                    
                    bool hasIsNotAssertion = attributes
                        .Any(attr => attr.AttributeClass?.ToDisplayString() == GenerateIsNotAssertionAttribute);

                    
                    if (!hasIsAssertion || !hasIsNotAssertion) return null;
                    
                    return classSymbol;
                })
            .Where(symbol => symbol != null);
        
        context.RegisterSourceOutput(classDeclarations, 
            (spc, classSymbol) => {
                if (classSymbol == null) return;
                
                string className = classSymbol.Name;
                string namespaceName = classSymbol.ContainingNamespace.ToDisplayString();
                
                string source = $$"""
                    // <auto-generated/>
                    namespace {{namespaceName}} {
                        public partial class {{className}} {
                        }
                    }
                    """;
            
                spc.AddSource($"{className}.g.cs", source);

            });

    }
}
