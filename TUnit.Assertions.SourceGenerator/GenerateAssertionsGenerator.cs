// ---------------------------------------------------------------------------------------------------------------------
// Imports
// ---------------------------------------------------------------------------------------------------------------------
using Microsoft.CodeAnalysis;
using Microsoft.CodeAnalysis.CSharp.Syntax;
using System.Collections.Immutable;
using TUnit.Assertions.SourceGenerator.Helpers;

namespace TUnit.Assertions.SourceGenerator;

// ---------------------------------------------------------------------------------------------------------------------
// Code
// ---------------------------------------------------------------------------------------------------------------------
[Generator(LanguageNames.CSharp)]
public class GenerateAssertionsGenerator : IIncrementalGenerator {
    public void Initialize(IncrementalGeneratorInitializationContext context) {
        IncrementalValueProvider<ImmutableArray<GenerateAssertionDto>> data = context.SyntaxProvider
            .CreateSyntaxProvider(
                predicate: (s, _) => s is ClassDeclarationSyntax,
                GenerateAssertionDtoFactory.Create)
            .Where(dto => dto is not null && !dto.IsEmpty)
            .Collect()!;

        context.RegisterSourceOutput(context.CompilationProvider.Combine(data),
            static (SourceProductionContext spc,
                (Compilation Compilation, ImmutableArray<GenerateAssertionDto> DtoArray) box) => {
                Compilation compilation = box.Compilation;
                
                var dtoArray = box.DtoArray;
                var builder = new GeneratorStringBuilder();

                foreach (GenerateAssertionDto dto in dtoArray) {
                    builder.AppendAutoGenerated()
                        .AppendUsings(
                            "TUnit.Assertions.Extensions",
                            "TUnit.Assertions.AssertConditions",
                            "TUnit.Assertions.AssertConditions.Interfaces",
                            "TUnit.Assertions.AssertionBuilders",
                            "TUnit.Assertions.AssertionBuilders.Wrappers"
                        )
                        .AppendNamespace(dto.Namespace)
                        .AppendLine();

                    builder.AppendLine($"public static partial class {dto.ClassName}")
                        .AppendAutoClosedScope(scopeBuilder => {
                            // Generate Is assertions
                            foreach (AttributeData isAssertion in dto.IsAssertions) {
                                AssertionMethodDto? methodDto = AssertionMethodDto.FromIsAssertion(dto, isAssertion);
                                if (methodDto is null) continue;

                                scopeBuilder.AppendBody(
                                    $$"""
                                    public static InvokableValueAssertionBuilder<{{methodDto.TypeName}}> {{methodDto.MethodName}}(this IValueSource<{{methodDto.TypeName}}> valueSource)
                                    {
                                     return valueSource.RegisterAssertion(new FuncValueAssertCondition<{{methodDto.TypeName}}, int>(0,
                                         (value, _, self) =>
                                         {
                                             {{methodDto.NullCheck}}
                                             return {{methodDto.TypeName}}.{{methodDto.MethodName}}(value);
                                         },
                                         (s, _, _) => $"{{methodDto.ActualMessage}}",
                                         $"{{methodDto.ExpectedMessage}}")
                                         , []
                                     ); 
                                    }

                                    """)
                                    .AppendLine();
                            }

                            // Generate IsNot assertions
                            foreach (AttributeData isNotAssertion in dto.IsNotAssertions) {
                                var methodName = isNotAssertion.ConstructorArguments[0].Value?.ToString();
                                if (string.IsNullOrEmpty(methodName)) continue;

                                scopeBuilder.AppendLine($"        public void {methodName}()");
                                scopeBuilder.AppendLine("        {");
                                // TODO Assertion Logic
                                scopeBuilder.AppendLine("        }");
                            }
                        });


                    // spc.AddSource($"GenerateAssertionsGenerator.{dto.Namespace}.{dto.ClassName}.g.cs", builder.ToString());
                    spc.AddSource($"{dto.Namespace}.{dto.ClassName}.g.cs", builder.ToStringAndClear());
                }
            });
    }
}