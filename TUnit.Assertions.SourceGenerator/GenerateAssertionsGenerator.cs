// ---------------------------------------------------------------------------------------------------------------------
// Imports
// ---------------------------------------------------------------------------------------------------------------------
using Microsoft.CodeAnalysis;
using Microsoft.CodeAnalysis.CSharp.Syntax;
using System.Collections.Immutable;
using TUnit.Assertions.SourceGenerator.Helpers;
using TUnit.Assertions.SourceGenerator.Helpers.AttributeExtractors;

namespace TUnit.Assertions.SourceGenerator;

// ---------------------------------------------------------------------------------------------------------------------
// Code
// ---------------------------------------------------------------------------------------------------------------------
[Generator(LanguageNames.CSharp)]
public class GenerateAssertionsGenerator : IIncrementalGenerator {
    public void Initialize(IncrementalGeneratorInitializationContext context) {
        IncrementalValueProvider<ImmutableArray<AssertionHolderDto>> data = context.SyntaxProvider
            .CreateSyntaxProvider(
                predicate: (s, _) => s is ClassDeclarationSyntax,
                AssertionHolderDtoFactory.Create)
            .Where(dto => dto is not null && !dto.IsEmpty)
            .Collect()!;

        context.RegisterSourceOutput(context.CompilationProvider.Combine(data),
            static (SourceProductionContext spc,
                (Compilation Compilation, ImmutableArray<AssertionHolderDto> DtoArray) box) => {
                
                var dtoArray = box.DtoArray;
                var builder = new GeneratorStringBuilder();

                foreach (AssertionHolderDto holderDto in dtoArray) {
                    builder.AppendAutoGenerated()
                        .AppendUsings(
                            "TUnit.Assertions.Extensions",
                            "TUnit.Assertions.AssertConditions",
                            "TUnit.Assertions.AssertConditions.Interfaces",
                            "TUnit.Assertions.AssertionBuilders",
                            "TUnit.Assertions.AssertionBuilders.Wrappers"
                        )
                        .AppendNamespace(holderDto.Namespace)
                        .AppendLine();

                    builder.AppendLine($"public static partial class {holderDto.ClassName}")
                        .AppendAutoClosedScope(scopeBuilder => {
                            foreach (GenerateAssertionDto assertionDto in holderDto.GenerateAssertions) {
                                if (!assertionDto.TryVerifyOrGetDiagnostics(out var diagnostics)) {
                                    foreach (Diagnostic diagnostic in diagnostics) {
                                        spc.ReportDiagnostic(diagnostic);
                                    }
                                    // Skip the generation of this one as it is expected that it will cause issues.
                                    continue;
                                }
                                
                                scopeBuilder.AppendBody(
                                    $$"""
                                    public static InvokableValueAssertionBuilder<{{assertionDto.TypeName}}> {{assertionDto.GetMethodName()}}(this IValueSource<{{assertionDto.TypeName}}> valueSource)
                                    {
                                        return valueSource.RegisterAssertion(new FuncValueAssertCondition<{{assertionDto.TypeName}}, int>(0,
                                            (value, _, self) =>
                                            {
                                                {{assertionDto.GetNullCheck()}}
                                                return {{assertionDto.GetActualCheck()}};
                                            },
                                            {{assertionDto.GetMessageFactoryOrDefault()}},
                                            {{ assertionDto.GetExpectationExpressionOrDefault()}}),
                                            []
                                        ); 
                                    }
                                    """)
                                    .AppendLine();
                            }
                        });
                    
                    spc.AddSource($"{holderDto.Namespace}.{holderDto.ClassName}.g.cs", builder.ToStringAndClear());
                }
            });
    }
}