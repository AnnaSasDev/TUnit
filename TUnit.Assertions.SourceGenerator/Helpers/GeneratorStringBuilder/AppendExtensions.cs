namespace TUnit.Assertions.SourceGenerator.Helpers;

public static class AppendExtensions {
    public static GeneratorStringBuilder AppendUsings(this GeneratorStringBuilder builder, string @using)
        => builder.AppendLine($"using {@using};");

    public static GeneratorStringBuilder AppendUsings(this GeneratorStringBuilder builder, params string[] usings)
        => AppendMultipleUsings(builder, usings);

    public static GeneratorStringBuilder AppendMultipleUsings(this GeneratorStringBuilder builder,
        params IEnumerable<string>[] usings) {
        var filteredUsings = new HashSet<string>(usings.SelectMany(u => u));
        return builder.ForEach(
            filteredUsings,
            static (builder, s) => builder.AppendUsings(s)
        );
    }

    public static GeneratorStringBuilder AppendAutoGenerated(this GeneratorStringBuilder builder)
        => builder.AppendLine("// <auto-generated />");

    public static GeneratorStringBuilder AppendComment(this GeneratorStringBuilder builder, string comment) {
        if (string.IsNullOrWhiteSpace(comment)) return builder;

        // Ensure some boundary checks
        bool check = builder.Builder.Length - 1 >= 0
                     && builder.Builder.Length - 1 < builder.Builder.Length
                     && builder.Builder[builder.Builder.Length - 1] == ' ';

        // To make sure we don't do a double space for a comment
        string space = check ? "" : " ";
        return builder.Append($"{space}// {comment}");
    }

    public static GeneratorStringBuilder AppendLineComment(this GeneratorStringBuilder builder, string comment) {
        if (string.IsNullOrWhiteSpace(comment)) return builder;
        return builder.AppendLine($"// {comment}");
    }

    // ReSharper disable once ReplaceSubstringWithRangeIndexer
    public static GeneratorStringBuilder AppendNamespace(this GeneratorStringBuilder builder, string name) {
        if (string.IsNullOrWhiteSpace(name)) return builder;
        if (name.EndsWith(";")) name = name.Substring(0, name.Length - 1);
        return builder.AppendLine($"namespace {name};");
    }

    public static GeneratorStringBuilder AppendNullableEnable(this GeneratorStringBuilder builder)
        => builder.AppendLine("#nullable enable");
    
    public static GeneratorStringBuilder AppendNullableDisable(this GeneratorStringBuilder builder)
        => builder.AppendLine("#nullable disable");

    public static GeneratorStringBuilder AppendAutoClosedScope(this GeneratorStringBuilder builder, Action<GeneratorStringBuilder> scopeBody) {
        builder.AppendLine("{");
        builder.Indent(scopeBody);
        builder.AppendLine("}");
        return builder;
    }
}