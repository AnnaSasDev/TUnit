// <auto-generated/>
#pragma warning disable
using global::System.Linq;
using global::System.Reflection;
using global::System.Runtime.CompilerServices;
using global::TUnit.Core;
using global::TUnit.Core.Hooks;
using global::TUnit.Core.Interfaces;

namespace TUnit.SourceGenerated;

[global::System.Diagnostics.StackTraceHidden]
[global::System.Diagnostics.CodeAnalysis.ExcludeFromCodeCoverage]
file partial class Hooks_Base1 : TUnit.Core.Interfaces.SourceGenerator.ITestHookSource
{
	[global::System.Runtime.CompilerServices.ModuleInitializer]
	public static void Initialise()
	{
		var instance = new Hooks_Base1();
		SourceRegistrar.RegisterTestHookSource(instance);
	}
	public global::System.Collections.Generic.IReadOnlyList<StaticHookMethod<TestContext>> CollectBeforeEveryTestHooks(string sessionId)
	{
		return
		[
		];
	}
	public global::System.Collections.Generic.IReadOnlyList<StaticHookMethod<TestContext>> CollectAfterEveryTestHooks(string sessionId)
	{
		return
		[
		];
	}
	public global::System.Collections.Generic.IReadOnlyList<InstanceHookMethod> CollectBeforeTestHooks(string sessionId)
	{
		return
		[
			new InstanceHookMethod<global::TUnit.TestProject.BeforeTests.Base1>
			{
				MethodInfo = typeof(global::TUnit.TestProject.BeforeTests.Base1).GetMethod("BeforeEach1", 0, []),
				AsyncBody = (classInstance, context, cancellationToken) => AsyncConvert.Convert(() => classInstance.BeforeEach1()),
				HookExecutor = DefaultExecutor.Instance,
				Order = 0,
			},
		];
	}
	public global::System.Collections.Generic.IReadOnlyList<InstanceHookMethod> CollectAfterTestHooks(string sessionId)
	{
		return
		[
		];
	}
}
