[  
// <auto-generated/>
#pragma warning disable
using global::System.Linq;
using global::System.Reflection;
using global::TUnit.Core;
using global::TUnit.Core.Extensions;

namespace TUnit.SourceGenerated;

[global::System.Diagnostics.StackTraceHidden]
[global::System.Diagnostics.CodeAnalysis.ExcludeFromCodeCoverage]
file partial class PriorityFilteringTests : TUnit.Core.Interfaces.SourceGenerator.ITestSource
{
	[global::System.Runtime.CompilerServices.ModuleInitializer]
	public static void Initialise()
	{
		SourceRegistrar.Register(new PriorityFilteringTests());
	}
	public global::System.Collections.Generic.IReadOnlyList<SourceGeneratedTestNode> CollectTests(string sessionId)
	{
		return Tests0(sessionId);
	}
	private global::System.Collections.Generic.List<SourceGeneratedTestNode> Tests0(string sessionId)
	{
		global::System.Collections.Generic.List<SourceGeneratedTestNode> nodes = [];
		var classDataIndex = 0;
		var testMethodDataIndex = 0;
		try
		{
			var testClassType = typeof(global::TUnit.TestProject.PriorityFilteringTests);
			var methodInfo = ((Action<global::TUnit.TestProject.PriorityFilteringTests>)((global::TUnit.TestProject.PriorityFilteringTests a0) => a0.High_1())).Method;

			var testBuilderContext = new global::TUnit.Core.TestBuilderContext();
			var testBuilderContextAccessor = new global::TUnit.Core.TestBuilderContextAccessor(testBuilderContext);

			var resettableClassFactoryDelegate = () => new ResettableLazy<global::TUnit.TestProject.PriorityFilteringTests>(() => 
			new global::TUnit.TestProject.PriorityFilteringTests()
			, sessionId, testBuilderContext);

			var resettableClassFactory = resettableClassFactoryDelegate();

			nodes.Add(new TestMetadata<global::TUnit.TestProject.PriorityFilteringTests>
			{
				TestId = $"TUnit.TestProject.PriorityFilteringTests.High_1:0",
				TestClassArguments = [],
				TestMethodArguments = [],
				TestClassProperties = [],
				CurrentRepeatAttempt = 0,
				RepeatLimit = 0,
				MethodInfo = methodInfo,
				ResettableClassFactory = resettableClassFactory,
				TestMethodFactory = (classInstance, cancellationToken) => AsyncConvert.Convert(() => classInstance.High_1()),
				TestFilePath = @"",
				TestLineNumber = 12,
				AttributeTypes = [ typeof(global::TUnit.Core.TestAttribute), typeof(global::TUnit.TestProject.PriorityAttribute) ],
				DataAttributes = [  ],
				TestBuilderContext = testBuilderContext,
			});
			resettableClassFactory = resettableClassFactoryDelegate();
			testBuilderContext = new();
			testBuilderContextAccessor.Current = testBuilderContext;
		}
		catch (global::System.Exception exception)
		{
			nodes.Add(new FailedInitializationTest
			{
				TestId = $"TUnit.TestProject.PriorityFilteringTests.High_1:0",
				TestClass = typeof(global::TUnit.TestProject.PriorityFilteringTests),
				ReturnType = ((Action<global::TUnit.TestProject.PriorityFilteringTests>)((global::TUnit.TestProject.PriorityFilteringTests a0) => a0.High_1())).Method.ReturnType,
				ParameterTypeFullNames = [],
				TestName = "High_1",
				TestFilePath = @"",
				TestLineNumber = 12,
				Exception = exception,
			});
		}
		return nodes;
	}
}

  
// <auto-generated/>
#pragma warning disable
using global::System.Linq;
using global::System.Reflection;
using global::TUnit.Core;
using global::TUnit.Core.Extensions;

namespace TUnit.SourceGenerated;

[global::System.Diagnostics.StackTraceHidden]
[global::System.Diagnostics.CodeAnalysis.ExcludeFromCodeCoverage]
file partial class PriorityFilteringTests : TUnit.Core.Interfaces.SourceGenerator.ITestSource
{
	[global::System.Runtime.CompilerServices.ModuleInitializer]
	public static void Initialise()
	{
		SourceRegistrar.Register(new PriorityFilteringTests());
	}
	public global::System.Collections.Generic.IReadOnlyList<SourceGeneratedTestNode> CollectTests(string sessionId)
	{
		return Tests0(sessionId);
	}
	private global::System.Collections.Generic.List<SourceGeneratedTestNode> Tests0(string sessionId)
	{
		global::System.Collections.Generic.List<SourceGeneratedTestNode> nodes = [];
		var classDataIndex = 0;
		var testMethodDataIndex = 0;
		try
		{
			var testClassType = typeof(global::TUnit.TestProject.PriorityFilteringTests);
			var methodInfo = ((Action<global::TUnit.TestProject.PriorityFilteringTests>)((global::TUnit.TestProject.PriorityFilteringTests a0) => a0.High_2())).Method;

			var testBuilderContext = new global::TUnit.Core.TestBuilderContext();
			var testBuilderContextAccessor = new global::TUnit.Core.TestBuilderContextAccessor(testBuilderContext);

			var resettableClassFactoryDelegate = () => new ResettableLazy<global::TUnit.TestProject.PriorityFilteringTests>(() => 
			new global::TUnit.TestProject.PriorityFilteringTests()
			, sessionId, testBuilderContext);

			var resettableClassFactory = resettableClassFactoryDelegate();

			nodes.Add(new TestMetadata<global::TUnit.TestProject.PriorityFilteringTests>
			{
				TestId = $"TUnit.TestProject.PriorityFilteringTests.High_2:0",
				TestClassArguments = [],
				TestMethodArguments = [],
				TestClassProperties = [],
				CurrentRepeatAttempt = 0,
				RepeatLimit = 0,
				MethodInfo = methodInfo,
				ResettableClassFactory = resettableClassFactory,
				TestMethodFactory = (classInstance, cancellationToken) => AsyncConvert.Convert(() => classInstance.High_2()),
				TestFilePath = @"",
				TestLineNumber = 18,
				AttributeTypes = [ typeof(global::TUnit.Core.TestAttribute), typeof(global::TUnit.TestProject.PriorityAttribute) ],
				DataAttributes = [  ],
				TestBuilderContext = testBuilderContext,
			});
			resettableClassFactory = resettableClassFactoryDelegate();
			testBuilderContext = new();
			testBuilderContextAccessor.Current = testBuilderContext;
		}
		catch (global::System.Exception exception)
		{
			nodes.Add(new FailedInitializationTest
			{
				TestId = $"TUnit.TestProject.PriorityFilteringTests.High_2:0",
				TestClass = typeof(global::TUnit.TestProject.PriorityFilteringTests),
				ReturnType = ((Action<global::TUnit.TestProject.PriorityFilteringTests>)((global::TUnit.TestProject.PriorityFilteringTests a0) => a0.High_2())).Method.ReturnType,
				ParameterTypeFullNames = [],
				TestName = "High_2",
				TestFilePath = @"",
				TestLineNumber = 18,
				Exception = exception,
			});
		}
		return nodes;
	}
}

  
// <auto-generated/>
#pragma warning disable
using global::System.Linq;
using global::System.Reflection;
using global::TUnit.Core;
using global::TUnit.Core.Extensions;

namespace TUnit.SourceGenerated;

[global::System.Diagnostics.StackTraceHidden]
[global::System.Diagnostics.CodeAnalysis.ExcludeFromCodeCoverage]
file partial class PriorityFilteringTests : TUnit.Core.Interfaces.SourceGenerator.ITestSource
{
	[global::System.Runtime.CompilerServices.ModuleInitializer]
	public static void Initialise()
	{
		SourceRegistrar.Register(new PriorityFilteringTests());
	}
	public global::System.Collections.Generic.IReadOnlyList<SourceGeneratedTestNode> CollectTests(string sessionId)
	{
		return Tests0(sessionId);
	}
	private global::System.Collections.Generic.List<SourceGeneratedTestNode> Tests0(string sessionId)
	{
		global::System.Collections.Generic.List<SourceGeneratedTestNode> nodes = [];
		var classDataIndex = 0;
		var testMethodDataIndex = 0;
		try
		{
			var testClassType = typeof(global::TUnit.TestProject.PriorityFilteringTests);
			var methodInfo = ((Action<global::TUnit.TestProject.PriorityFilteringTests>)((global::TUnit.TestProject.PriorityFilteringTests a0) => a0.High_3())).Method;

			var testBuilderContext = new global::TUnit.Core.TestBuilderContext();
			var testBuilderContextAccessor = new global::TUnit.Core.TestBuilderContextAccessor(testBuilderContext);

			var resettableClassFactoryDelegate = () => new ResettableLazy<global::TUnit.TestProject.PriorityFilteringTests>(() => 
			new global::TUnit.TestProject.PriorityFilteringTests()
			, sessionId, testBuilderContext);

			var resettableClassFactory = resettableClassFactoryDelegate();

			nodes.Add(new TestMetadata<global::TUnit.TestProject.PriorityFilteringTests>
			{
				TestId = $"TUnit.TestProject.PriorityFilteringTests.High_3:0",
				TestClassArguments = [],
				TestMethodArguments = [],
				TestClassProperties = [],
				CurrentRepeatAttempt = 0,
				RepeatLimit = 0,
				MethodInfo = methodInfo,
				ResettableClassFactory = resettableClassFactory,
				TestMethodFactory = (classInstance, cancellationToken) => AsyncConvert.Convert(() => classInstance.High_3()),
				TestFilePath = @"",
				TestLineNumber = 24,
				AttributeTypes = [ typeof(global::TUnit.Core.TestAttribute), typeof(global::TUnit.TestProject.PriorityAttribute) ],
				DataAttributes = [  ],
				TestBuilderContext = testBuilderContext,
			});
			resettableClassFactory = resettableClassFactoryDelegate();
			testBuilderContext = new();
			testBuilderContextAccessor.Current = testBuilderContext;
		}
		catch (global::System.Exception exception)
		{
			nodes.Add(new FailedInitializationTest
			{
				TestId = $"TUnit.TestProject.PriorityFilteringTests.High_3:0",
				TestClass = typeof(global::TUnit.TestProject.PriorityFilteringTests),
				ReturnType = ((Action<global::TUnit.TestProject.PriorityFilteringTests>)((global::TUnit.TestProject.PriorityFilteringTests a0) => a0.High_3())).Method.ReturnType,
				ParameterTypeFullNames = [],
				TestName = "High_3",
				TestFilePath = @"",
				TestLineNumber = 24,
				Exception = exception,
			});
		}
		return nodes;
	}
}

  
// <auto-generated/>
#pragma warning disable
using global::System.Linq;
using global::System.Reflection;
using global::TUnit.Core;
using global::TUnit.Core.Extensions;

namespace TUnit.SourceGenerated;

[global::System.Diagnostics.StackTraceHidden]
[global::System.Diagnostics.CodeAnalysis.ExcludeFromCodeCoverage]
file partial class PriorityFilteringTests : TUnit.Core.Interfaces.SourceGenerator.ITestSource
{
	[global::System.Runtime.CompilerServices.ModuleInitializer]
	public static void Initialise()
	{
		SourceRegistrar.Register(new PriorityFilteringTests());
	}
	public global::System.Collections.Generic.IReadOnlyList<SourceGeneratedTestNode> CollectTests(string sessionId)
	{
		return Tests0(sessionId);
	}
	private global::System.Collections.Generic.List<SourceGeneratedTestNode> Tests0(string sessionId)
	{
		global::System.Collections.Generic.List<SourceGeneratedTestNode> nodes = [];
		var classDataIndex = 0;
		var testMethodDataIndex = 0;
		try
		{
			var testClassType = typeof(global::TUnit.TestProject.PriorityFilteringTests);
			var methodInfo = ((Action<global::TUnit.TestProject.PriorityFilteringTests>)((global::TUnit.TestProject.PriorityFilteringTests a0) => a0.Medium_1())).Method;

			var testBuilderContext = new global::TUnit.Core.TestBuilderContext();
			var testBuilderContextAccessor = new global::TUnit.Core.TestBuilderContextAccessor(testBuilderContext);

			var resettableClassFactoryDelegate = () => new ResettableLazy<global::TUnit.TestProject.PriorityFilteringTests>(() => 
			new global::TUnit.TestProject.PriorityFilteringTests()
			, sessionId, testBuilderContext);

			var resettableClassFactory = resettableClassFactoryDelegate();

			nodes.Add(new TestMetadata<global::TUnit.TestProject.PriorityFilteringTests>
			{
				TestId = $"TUnit.TestProject.PriorityFilteringTests.Medium_1:0",
				TestClassArguments = [],
				TestMethodArguments = [],
				TestClassProperties = [],
				CurrentRepeatAttempt = 0,
				RepeatLimit = 0,
				MethodInfo = methodInfo,
				ResettableClassFactory = resettableClassFactory,
				TestMethodFactory = (classInstance, cancellationToken) => AsyncConvert.Convert(() => classInstance.Medium_1()),
				TestFilePath = @"",
				TestLineNumber = 30,
				AttributeTypes = [ typeof(global::TUnit.Core.TestAttribute), typeof(global::TUnit.TestProject.PriorityAttribute) ],
				DataAttributes = [  ],
				TestBuilderContext = testBuilderContext,
			});
			resettableClassFactory = resettableClassFactoryDelegate();
			testBuilderContext = new();
			testBuilderContextAccessor.Current = testBuilderContext;
		}
		catch (global::System.Exception exception)
		{
			nodes.Add(new FailedInitializationTest
			{
				TestId = $"TUnit.TestProject.PriorityFilteringTests.Medium_1:0",
				TestClass = typeof(global::TUnit.TestProject.PriorityFilteringTests),
				ReturnType = ((Action<global::TUnit.TestProject.PriorityFilteringTests>)((global::TUnit.TestProject.PriorityFilteringTests a0) => a0.Medium_1())).Method.ReturnType,
				ParameterTypeFullNames = [],
				TestName = "Medium_1",
				TestFilePath = @"",
				TestLineNumber = 30,
				Exception = exception,
			});
		}
		return nodes;
	}
}

  
// <auto-generated/>
#pragma warning disable
using global::System.Linq;
using global::System.Reflection;
using global::TUnit.Core;
using global::TUnit.Core.Extensions;

namespace TUnit.SourceGenerated;

[global::System.Diagnostics.StackTraceHidden]
[global::System.Diagnostics.CodeAnalysis.ExcludeFromCodeCoverage]
file partial class PriorityFilteringTests : TUnit.Core.Interfaces.SourceGenerator.ITestSource
{
	[global::System.Runtime.CompilerServices.ModuleInitializer]
	public static void Initialise()
	{
		SourceRegistrar.Register(new PriorityFilteringTests());
	}
	public global::System.Collections.Generic.IReadOnlyList<SourceGeneratedTestNode> CollectTests(string sessionId)
	{
		return Tests0(sessionId);
	}
	private global::System.Collections.Generic.List<SourceGeneratedTestNode> Tests0(string sessionId)
	{
		global::System.Collections.Generic.List<SourceGeneratedTestNode> nodes = [];
		var classDataIndex = 0;
		var testMethodDataIndex = 0;
		try
		{
			var testClassType = typeof(global::TUnit.TestProject.PriorityFilteringTests);
			var methodInfo = ((Action<global::TUnit.TestProject.PriorityFilteringTests>)((global::TUnit.TestProject.PriorityFilteringTests a0) => a0.Medium_2())).Method;

			var testBuilderContext = new global::TUnit.Core.TestBuilderContext();
			var testBuilderContextAccessor = new global::TUnit.Core.TestBuilderContextAccessor(testBuilderContext);

			var resettableClassFactoryDelegate = () => new ResettableLazy<global::TUnit.TestProject.PriorityFilteringTests>(() => 
			new global::TUnit.TestProject.PriorityFilteringTests()
			, sessionId, testBuilderContext);

			var resettableClassFactory = resettableClassFactoryDelegate();

			nodes.Add(new TestMetadata<global::TUnit.TestProject.PriorityFilteringTests>
			{
				TestId = $"TUnit.TestProject.PriorityFilteringTests.Medium_2:0",
				TestClassArguments = [],
				TestMethodArguments = [],
				TestClassProperties = [],
				CurrentRepeatAttempt = 0,
				RepeatLimit = 0,
				MethodInfo = methodInfo,
				ResettableClassFactory = resettableClassFactory,
				TestMethodFactory = (classInstance, cancellationToken) => AsyncConvert.Convert(() => classInstance.Medium_2()),
				TestFilePath = @"",
				TestLineNumber = 36,
				AttributeTypes = [ typeof(global::TUnit.Core.TestAttribute), typeof(global::TUnit.TestProject.PriorityAttribute) ],
				DataAttributes = [  ],
				TestBuilderContext = testBuilderContext,
			});
			resettableClassFactory = resettableClassFactoryDelegate();
			testBuilderContext = new();
			testBuilderContextAccessor.Current = testBuilderContext;
		}
		catch (global::System.Exception exception)
		{
			nodes.Add(new FailedInitializationTest
			{
				TestId = $"TUnit.TestProject.PriorityFilteringTests.Medium_2:0",
				TestClass = typeof(global::TUnit.TestProject.PriorityFilteringTests),
				ReturnType = ((Action<global::TUnit.TestProject.PriorityFilteringTests>)((global::TUnit.TestProject.PriorityFilteringTests a0) => a0.Medium_2())).Method.ReturnType,
				ParameterTypeFullNames = [],
				TestName = "Medium_2",
				TestFilePath = @"",
				TestLineNumber = 36,
				Exception = exception,
			});
		}
		return nodes;
	}
}

  
// <auto-generated/>
#pragma warning disable
using global::System.Linq;
using global::System.Reflection;
using global::TUnit.Core;
using global::TUnit.Core.Extensions;

namespace TUnit.SourceGenerated;

[global::System.Diagnostics.StackTraceHidden]
[global::System.Diagnostics.CodeAnalysis.ExcludeFromCodeCoverage]
file partial class PriorityFilteringTests : TUnit.Core.Interfaces.SourceGenerator.ITestSource
{
	[global::System.Runtime.CompilerServices.ModuleInitializer]
	public static void Initialise()
	{
		SourceRegistrar.Register(new PriorityFilteringTests());
	}
	public global::System.Collections.Generic.IReadOnlyList<SourceGeneratedTestNode> CollectTests(string sessionId)
	{
		return Tests0(sessionId);
	}
	private global::System.Collections.Generic.List<SourceGeneratedTestNode> Tests0(string sessionId)
	{
		global::System.Collections.Generic.List<SourceGeneratedTestNode> nodes = [];
		var classDataIndex = 0;
		var testMethodDataIndex = 0;
		try
		{
			var testClassType = typeof(global::TUnit.TestProject.PriorityFilteringTests);
			var methodInfo = ((Action<global::TUnit.TestProject.PriorityFilteringTests>)((global::TUnit.TestProject.PriorityFilteringTests a0) => a0.Low_1())).Method;

			var testBuilderContext = new global::TUnit.Core.TestBuilderContext();
			var testBuilderContextAccessor = new global::TUnit.Core.TestBuilderContextAccessor(testBuilderContext);

			var resettableClassFactoryDelegate = () => new ResettableLazy<global::TUnit.TestProject.PriorityFilteringTests>(() => 
			new global::TUnit.TestProject.PriorityFilteringTests()
			, sessionId, testBuilderContext);

			var resettableClassFactory = resettableClassFactoryDelegate();

			nodes.Add(new TestMetadata<global::TUnit.TestProject.PriorityFilteringTests>
			{
				TestId = $"TUnit.TestProject.PriorityFilteringTests.Low_1:0",
				TestClassArguments = [],
				TestMethodArguments = [],
				TestClassProperties = [],
				CurrentRepeatAttempt = 0,
				RepeatLimit = 0,
				MethodInfo = methodInfo,
				ResettableClassFactory = resettableClassFactory,
				TestMethodFactory = (classInstance, cancellationToken) => AsyncConvert.Convert(() => classInstance.Low_1()),
				TestFilePath = @"",
				TestLineNumber = 42,
				AttributeTypes = [ typeof(global::TUnit.Core.TestAttribute), typeof(global::TUnit.TestProject.PriorityAttribute) ],
				DataAttributes = [  ],
				TestBuilderContext = testBuilderContext,
			});
			resettableClassFactory = resettableClassFactoryDelegate();
			testBuilderContext = new();
			testBuilderContextAccessor.Current = testBuilderContext;
		}
		catch (global::System.Exception exception)
		{
			nodes.Add(new FailedInitializationTest
			{
				TestId = $"TUnit.TestProject.PriorityFilteringTests.Low_1:0",
				TestClass = typeof(global::TUnit.TestProject.PriorityFilteringTests),
				ReturnType = ((Action<global::TUnit.TestProject.PriorityFilteringTests>)((global::TUnit.TestProject.PriorityFilteringTests a0) => a0.Low_1())).Method.ReturnType,
				ParameterTypeFullNames = [],
				TestName = "Low_1",
				TestFilePath = @"",
				TestLineNumber = 42,
				Exception = exception,
			});
		}
		return nodes;
	}
}

]