// <auto-generated/>
#pragma warning disable
using global::System.Linq;
using global::System.Reflection;
using global::TUnit.Core;
using global::TUnit.Core.Extensions;

namespace TUnit.SourceGenerated;

[global::System.Diagnostics.StackTraceHidden]
[global::System.Diagnostics.CodeAnalysis.ExcludeFromCodeCoverage]
file partial class ClassDataSourceDrivenTests : TUnit.Core.Interfaces.SourceGenerator.ITestSource
{
	[global::System.Runtime.CompilerServices.ModuleInitializer]
	public static void Initialise()
	{
		SourceRegistrar.Register(new ClassDataSourceDrivenTests());
	}
	public global::System.Collections.Generic.IReadOnlyList<SourceGeneratedTestNode> CollectTests(string sessionId)
	{
		return Tests0(sessionId);
	}
	private global::System.Collections.Generic.List<SourceGeneratedTestNode> Tests0(string sessionId)
	{
		global::System.Collections.Generic.List<SourceGeneratedTestNode> nodes = [];
		var classDataIndex = 0;
		var testMethodDataIndex = 0;
		try
		{
			var testClassType = typeof(global::TUnit.TestProject.ClassDataSourceDrivenTests);
			var methodInfo = ((Action<global::TUnit.TestProject.ClassDataSourceDrivenTests, global::TUnit.TestProject.Dummy.SomeAsyncDisposableClass>)((global::TUnit.TestProject.ClassDataSourceDrivenTests a0, global::TUnit.TestProject.Dummy.SomeAsyncDisposableClass a1) => a0.DataSource_Class(a1))).Method;

			var testBuilderContext = new global::TUnit.Core.TestBuilderContext();
			var testBuilderContextAccessor = new global::TUnit.Core.TestBuilderContextAccessor(testBuilderContext);
			var methodArgDataGeneratorMetadata = new DataGeneratorMetadata
{
   Type = TUnit.Core.Enums.DataGeneratorType.Parameters,
   TestClassType = testClassType,
   ParameterInfos = methodInfo.GetParameters(),
   PropertyInfo = null,
   TestBuilderContext = testBuilderContextAccessor,
   TestSessionId = sessionId,
};
			var methodDataAttribute = methodInfo.GetCustomAttributes<global::TUnit.Core.ClassDataSourceAttribute<global::TUnit.TestProject.Dummy.SomeAsyncDisposableClass>>(true).ElementAt(0);

			var methodArgGeneratedDataArray = methodDataAttribute.GenerateDataSources(methodArgDataGeneratorMetadata);

			foreach (var methodArgGeneratedDataAccessor in methodArgGeneratedDataArray)
			{
				testMethodDataIndex++;

				var methodArgGeneratedData = methodArgGeneratedDataAccessor();
				var resettableClassFactoryDelegate = () => new ResettableLazy<global::TUnit.TestProject.ClassDataSourceDrivenTests>(() => 
				new global::TUnit.TestProject.ClassDataSourceDrivenTests()
				, sessionId, testBuilderContext);

				var resettableClassFactory = resettableClassFactoryDelegate();

				nodes.Add(new TestMetadata<global::TUnit.TestProject.ClassDataSourceDrivenTests>
				{
					TestId = $"global::TUnit.Core.ClassDataSourceAttribute<global::TUnit.TestProject.Dummy.SomeAsyncDisposableClass>:{testMethodDataIndex}:TL-GAC0:TUnit.TestProject.ClassDataSourceDrivenTests.DataSource_Class(TUnit.TestProject.Dummy.SomeAsyncDisposableClass):0",
					TestClassArguments = [],
					TestMethodArguments = [methodArgGeneratedData],
					TestClassProperties = [],
					CurrentRepeatAttempt = 0,
					RepeatLimit = 0,
					MethodInfo = methodInfo,
					ResettableClassFactory = resettableClassFactory,
					TestMethodFactory = (classInstance, cancellationToken) => AsyncConvert.Convert(() => classInstance.DataSource_Class(methodArgGeneratedData)),
					TestFilePath = @"",
					TestLineNumber = 10,
					AttributeTypes = [ typeof(global::TUnit.Core.TestAttribute) ],
					DataAttributes = [ methodDataAttribute ],
					TestBuilderContext = testBuilderContext,
				});
				resettableClassFactory = resettableClassFactoryDelegate();
				testBuilderContext = new();
				testBuilderContextAccessor.Current = testBuilderContext;
			}
		}
		catch (global::System.Exception exception)
		{
			nodes.Add(new FailedInitializationTest
			{
				TestId = $"global::TUnit.Core.ClassDataSourceAttribute<global::TUnit.TestProject.Dummy.SomeAsyncDisposableClass>:{testMethodDataIndex}:TL-GAC0:TUnit.TestProject.ClassDataSourceDrivenTests.DataSource_Class(TUnit.TestProject.Dummy.SomeAsyncDisposableClass):0",
				TestClass = typeof(global::TUnit.TestProject.ClassDataSourceDrivenTests),
				ReturnType = ((Action<global::TUnit.TestProject.ClassDataSourceDrivenTests, global::TUnit.TestProject.Dummy.SomeAsyncDisposableClass>)((global::TUnit.TestProject.ClassDataSourceDrivenTests a0, global::TUnit.TestProject.Dummy.SomeAsyncDisposableClass a1) => a0.DataSource_Class(a1))).Method.ReturnType,
				ParameterTypeFullNames = [typeof(global::TUnit.TestProject.Dummy.SomeAsyncDisposableClass)],
				TestName = "DataSource_Class",
				TestFilePath = @"",
				TestLineNumber = 10,
				Exception = exception,
			});
		}
		return nodes;
	}
}
