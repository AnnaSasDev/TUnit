[  
// <auto-generated/>
#pragma warning disable
using global::System.Linq;
using global::System.Reflection;
using global::TUnit.Core;
using global::TUnit.Core.Extensions;

namespace TUnit.SourceGenerated;

[global::System.Diagnostics.StackTraceHidden]
[global::System.Diagnostics.CodeAnalysis.ExcludeFromCodeCoverage]
file partial class RepeatTests : TUnit.Core.Interfaces.SourceGenerator.ITestSource
{
	[global::System.Runtime.CompilerServices.ModuleInitializer]
	public static void Initialise()
	{
		SourceRegistrar.Register(new RepeatTests());
	}
	public global::System.Collections.Generic.IReadOnlyList<SourceGeneratedTestNode> CollectTests(string sessionId)
	{
		return
		[
			..Tests0(sessionId),
			..Tests1(sessionId),
		];
	}
	private global::System.Collections.Generic.List<SourceGeneratedTestNode> Tests0(string sessionId)
	{
		global::System.Collections.Generic.List<SourceGeneratedTestNode> nodes = [];
		var classDataIndex = 0;
		var testMethodDataIndex = 0;
		try
		{
			var testClassType = typeof(global::TUnit.TestProject.RepeatTests);
			var methodInfo = ((Action<global::TUnit.TestProject.RepeatTests>)((global::TUnit.TestProject.RepeatTests a0) => a0.One())).Method;

			var testBuilderContext = new global::TUnit.Core.TestBuilderContext();
			var testBuilderContextAccessor = new global::TUnit.Core.TestBuilderContextAccessor(testBuilderContext);

			var resettableClassFactoryDelegate = () => new ResettableLazy<global::TUnit.TestProject.RepeatTests>(() => 
			new global::TUnit.TestProject.RepeatTests()
			, sessionId, testBuilderContext);

			var resettableClassFactory = resettableClassFactoryDelegate();

			nodes.Add(new TestMetadata<global::TUnit.TestProject.RepeatTests>
			{
				TestId = $"TUnit.TestProject.RepeatTests.One:0",
				TestClassArguments = [],
				TestMethodArguments = [],
				TestClassProperties = [],
				CurrentRepeatAttempt = 0,
				RepeatLimit = 1,
				MethodInfo = methodInfo,
				ResettableClassFactory = resettableClassFactory,
				TestMethodFactory = (classInstance, cancellationToken) => AsyncConvert.Convert(() => classInstance.One()),
				TestFilePath = @"",
				TestLineNumber = 6,
				AttributeTypes = [ typeof(global::TUnit.Core.TestAttribute), typeof(global::TUnit.Core.RepeatAttribute) ],
				DataAttributes = [  ],
				TestBuilderContext = testBuilderContext,
			});
			resettableClassFactory = resettableClassFactoryDelegate();
			testBuilderContext = new();
			testBuilderContextAccessor.Current = testBuilderContext;
		}
		catch (global::System.Exception exception)
		{
			nodes.Add(new FailedInitializationTest
			{
				TestId = $"TUnit.TestProject.RepeatTests.One:0",
				TestClass = typeof(global::TUnit.TestProject.RepeatTests),
				ReturnType = ((Action<global::TUnit.TestProject.RepeatTests>)((global::TUnit.TestProject.RepeatTests a0) => a0.One())).Method.ReturnType,
				ParameterTypeFullNames = [],
				TestName = "One",
				TestFilePath = @"",
				TestLineNumber = 6,
				Exception = exception,
			});
		}
		return nodes;
	}
	private global::System.Collections.Generic.List<SourceGeneratedTestNode> Tests1(string sessionId)
	{
		global::System.Collections.Generic.List<SourceGeneratedTestNode> nodes = [];
		var classDataIndex = 0;
		var testMethodDataIndex = 0;
		try
		{
			var testClassType = typeof(global::TUnit.TestProject.RepeatTests);
			var methodInfo = ((Action<global::TUnit.TestProject.RepeatTests>)((global::TUnit.TestProject.RepeatTests a0) => a0.One())).Method;

			var testBuilderContext = new global::TUnit.Core.TestBuilderContext();
			var testBuilderContextAccessor = new global::TUnit.Core.TestBuilderContextAccessor(testBuilderContext);

			var resettableClassFactoryDelegate = () => new ResettableLazy<global::TUnit.TestProject.RepeatTests>(() => 
			new global::TUnit.TestProject.RepeatTests()
			, sessionId, testBuilderContext);

			var resettableClassFactory = resettableClassFactoryDelegate();

			nodes.Add(new TestMetadata<global::TUnit.TestProject.RepeatTests>
			{
				TestId = $"TUnit.TestProject.RepeatTests.One:1",
				TestClassArguments = [],
				TestMethodArguments = [],
				TestClassProperties = [],
				CurrentRepeatAttempt = 1,
				RepeatLimit = 1,
				MethodInfo = methodInfo,
				ResettableClassFactory = resettableClassFactory,
				TestMethodFactory = (classInstance, cancellationToken) => AsyncConvert.Convert(() => classInstance.One()),
				TestFilePath = @"",
				TestLineNumber = 6,
				AttributeTypes = [ typeof(global::TUnit.Core.TestAttribute), typeof(global::TUnit.Core.RepeatAttribute) ],
				DataAttributes = [  ],
				TestBuilderContext = testBuilderContext,
			});
			resettableClassFactory = resettableClassFactoryDelegate();
			testBuilderContext = new();
			testBuilderContextAccessor.Current = testBuilderContext;
		}
		catch (global::System.Exception exception)
		{
			nodes.Add(new FailedInitializationTest
			{
				TestId = $"TUnit.TestProject.RepeatTests.One:1",
				TestClass = typeof(global::TUnit.TestProject.RepeatTests),
				ReturnType = ((Action<global::TUnit.TestProject.RepeatTests>)((global::TUnit.TestProject.RepeatTests a0) => a0.One())).Method.ReturnType,
				ParameterTypeFullNames = [],
				TestName = "One",
				TestFilePath = @"",
				TestLineNumber = 6,
				Exception = exception,
			});
		}
		return nodes;
	}
}

  
// <auto-generated/>
#pragma warning disable
using global::System.Linq;
using global::System.Reflection;
using global::TUnit.Core;
using global::TUnit.Core.Extensions;

namespace TUnit.SourceGenerated;

[global::System.Diagnostics.StackTraceHidden]
[global::System.Diagnostics.CodeAnalysis.ExcludeFromCodeCoverage]
file partial class RepeatTests : TUnit.Core.Interfaces.SourceGenerator.ITestSource
{
	[global::System.Runtime.CompilerServices.ModuleInitializer]
	public static void Initialise()
	{
		SourceRegistrar.Register(new RepeatTests());
	}
	public global::System.Collections.Generic.IReadOnlyList<SourceGeneratedTestNode> CollectTests(string sessionId)
	{
		return
		[
			..Tests0(sessionId),
			..Tests1(sessionId),
			..Tests2(sessionId),
		];
	}
	private global::System.Collections.Generic.List<SourceGeneratedTestNode> Tests0(string sessionId)
	{
		global::System.Collections.Generic.List<SourceGeneratedTestNode> nodes = [];
		var classDataIndex = 0;
		var testMethodDataIndex = 0;
		try
		{
			var testClassType = typeof(global::TUnit.TestProject.RepeatTests);
			var methodInfo = ((Action<global::TUnit.TestProject.RepeatTests>)((global::TUnit.TestProject.RepeatTests a0) => a0.Two())).Method;

			var testBuilderContext = new global::TUnit.Core.TestBuilderContext();
			var testBuilderContextAccessor = new global::TUnit.Core.TestBuilderContextAccessor(testBuilderContext);

			var resettableClassFactoryDelegate = () => new ResettableLazy<global::TUnit.TestProject.RepeatTests>(() => 
			new global::TUnit.TestProject.RepeatTests()
			, sessionId, testBuilderContext);

			var resettableClassFactory = resettableClassFactoryDelegate();

			nodes.Add(new TestMetadata<global::TUnit.TestProject.RepeatTests>
			{
				TestId = $"TUnit.TestProject.RepeatTests.Two:0",
				TestClassArguments = [],
				TestMethodArguments = [],
				TestClassProperties = [],
				CurrentRepeatAttempt = 0,
				RepeatLimit = 2,
				MethodInfo = methodInfo,
				ResettableClassFactory = resettableClassFactory,
				TestMethodFactory = (classInstance, cancellationToken) => AsyncConvert.Convert(() => classInstance.Two()),
				TestFilePath = @"",
				TestLineNumber = 13,
				AttributeTypes = [ typeof(global::TUnit.Core.TestAttribute), typeof(global::TUnit.Core.RepeatAttribute) ],
				DataAttributes = [  ],
				TestBuilderContext = testBuilderContext,
			});
			resettableClassFactory = resettableClassFactoryDelegate();
			testBuilderContext = new();
			testBuilderContextAccessor.Current = testBuilderContext;
		}
		catch (global::System.Exception exception)
		{
			nodes.Add(new FailedInitializationTest
			{
				TestId = $"TUnit.TestProject.RepeatTests.Two:0",
				TestClass = typeof(global::TUnit.TestProject.RepeatTests),
				ReturnType = ((Action<global::TUnit.TestProject.RepeatTests>)((global::TUnit.TestProject.RepeatTests a0) => a0.Two())).Method.ReturnType,
				ParameterTypeFullNames = [],
				TestName = "Two",
				TestFilePath = @"",
				TestLineNumber = 13,
				Exception = exception,
			});
		}
		return nodes;
	}
	private global::System.Collections.Generic.List<SourceGeneratedTestNode> Tests1(string sessionId)
	{
		global::System.Collections.Generic.List<SourceGeneratedTestNode> nodes = [];
		var classDataIndex = 0;
		var testMethodDataIndex = 0;
		try
		{
			var testClassType = typeof(global::TUnit.TestProject.RepeatTests);
			var methodInfo = ((Action<global::TUnit.TestProject.RepeatTests>)((global::TUnit.TestProject.RepeatTests a0) => a0.Two())).Method;

			var testBuilderContext = new global::TUnit.Core.TestBuilderContext();
			var testBuilderContextAccessor = new global::TUnit.Core.TestBuilderContextAccessor(testBuilderContext);

			var resettableClassFactoryDelegate = () => new ResettableLazy<global::TUnit.TestProject.RepeatTests>(() => 
			new global::TUnit.TestProject.RepeatTests()
			, sessionId, testBuilderContext);

			var resettableClassFactory = resettableClassFactoryDelegate();

			nodes.Add(new TestMetadata<global::TUnit.TestProject.RepeatTests>
			{
				TestId = $"TUnit.TestProject.RepeatTests.Two:1",
				TestClassArguments = [],
				TestMethodArguments = [],
				TestClassProperties = [],
				CurrentRepeatAttempt = 1,
				RepeatLimit = 2,
				MethodInfo = methodInfo,
				ResettableClassFactory = resettableClassFactory,
				TestMethodFactory = (classInstance, cancellationToken) => AsyncConvert.Convert(() => classInstance.Two()),
				TestFilePath = @"",
				TestLineNumber = 13,
				AttributeTypes = [ typeof(global::TUnit.Core.TestAttribute), typeof(global::TUnit.Core.RepeatAttribute) ],
				DataAttributes = [  ],
				TestBuilderContext = testBuilderContext,
			});
			resettableClassFactory = resettableClassFactoryDelegate();
			testBuilderContext = new();
			testBuilderContextAccessor.Current = testBuilderContext;
		}
		catch (global::System.Exception exception)
		{
			nodes.Add(new FailedInitializationTest
			{
				TestId = $"TUnit.TestProject.RepeatTests.Two:1",
				TestClass = typeof(global::TUnit.TestProject.RepeatTests),
				ReturnType = ((Action<global::TUnit.TestProject.RepeatTests>)((global::TUnit.TestProject.RepeatTests a0) => a0.Two())).Method.ReturnType,
				ParameterTypeFullNames = [],
				TestName = "Two",
				TestFilePath = @"",
				TestLineNumber = 13,
				Exception = exception,
			});
		}
		return nodes;
	}
	private global::System.Collections.Generic.List<SourceGeneratedTestNode> Tests2(string sessionId)
	{
		global::System.Collections.Generic.List<SourceGeneratedTestNode> nodes = [];
		var classDataIndex = 0;
		var testMethodDataIndex = 0;
		try
		{
			var testClassType = typeof(global::TUnit.TestProject.RepeatTests);
			var methodInfo = ((Action<global::TUnit.TestProject.RepeatTests>)((global::TUnit.TestProject.RepeatTests a0) => a0.Two())).Method;

			var testBuilderContext = new global::TUnit.Core.TestBuilderContext();
			var testBuilderContextAccessor = new global::TUnit.Core.TestBuilderContextAccessor(testBuilderContext);

			var resettableClassFactoryDelegate = () => new ResettableLazy<global::TUnit.TestProject.RepeatTests>(() => 
			new global::TUnit.TestProject.RepeatTests()
			, sessionId, testBuilderContext);

			var resettableClassFactory = resettableClassFactoryDelegate();

			nodes.Add(new TestMetadata<global::TUnit.TestProject.RepeatTests>
			{
				TestId = $"TUnit.TestProject.RepeatTests.Two:2",
				TestClassArguments = [],
				TestMethodArguments = [],
				TestClassProperties = [],
				CurrentRepeatAttempt = 2,
				RepeatLimit = 2,
				MethodInfo = methodInfo,
				ResettableClassFactory = resettableClassFactory,
				TestMethodFactory = (classInstance, cancellationToken) => AsyncConvert.Convert(() => classInstance.Two()),
				TestFilePath = @"",
				TestLineNumber = 13,
				AttributeTypes = [ typeof(global::TUnit.Core.TestAttribute), typeof(global::TUnit.Core.RepeatAttribute) ],
				DataAttributes = [  ],
				TestBuilderContext = testBuilderContext,
			});
			resettableClassFactory = resettableClassFactoryDelegate();
			testBuilderContext = new();
			testBuilderContextAccessor.Current = testBuilderContext;
		}
		catch (global::System.Exception exception)
		{
			nodes.Add(new FailedInitializationTest
			{
				TestId = $"TUnit.TestProject.RepeatTests.Two:2",
				TestClass = typeof(global::TUnit.TestProject.RepeatTests),
				ReturnType = ((Action<global::TUnit.TestProject.RepeatTests>)((global::TUnit.TestProject.RepeatTests a0) => a0.Two())).Method.ReturnType,
				ParameterTypeFullNames = [],
				TestName = "Two",
				TestFilePath = @"",
				TestLineNumber = 13,
				Exception = exception,
			});
		}
		return nodes;
	}
}

  
// <auto-generated/>
#pragma warning disable
using global::System.Linq;
using global::System.Reflection;
using global::TUnit.Core;
using global::TUnit.Core.Extensions;

namespace TUnit.SourceGenerated;

[global::System.Diagnostics.StackTraceHidden]
[global::System.Diagnostics.CodeAnalysis.ExcludeFromCodeCoverage]
file partial class RepeatTests : TUnit.Core.Interfaces.SourceGenerator.ITestSource
{
	[global::System.Runtime.CompilerServices.ModuleInitializer]
	public static void Initialise()
	{
		SourceRegistrar.Register(new RepeatTests());
	}
	public global::System.Collections.Generic.IReadOnlyList<SourceGeneratedTestNode> CollectTests(string sessionId)
	{
		return
		[
			..Tests0(sessionId),
			..Tests1(sessionId),
			..Tests2(sessionId),
			..Tests3(sessionId),
		];
	}
	private global::System.Collections.Generic.List<SourceGeneratedTestNode> Tests0(string sessionId)
	{
		global::System.Collections.Generic.List<SourceGeneratedTestNode> nodes = [];
		var classDataIndex = 0;
		var testMethodDataIndex = 0;
		try
		{
			var testClassType = typeof(global::TUnit.TestProject.RepeatTests);
			var methodInfo = ((Action<global::TUnit.TestProject.RepeatTests>)((global::TUnit.TestProject.RepeatTests a0) => a0.Three())).Method;

			var testBuilderContext = new global::TUnit.Core.TestBuilderContext();
			var testBuilderContextAccessor = new global::TUnit.Core.TestBuilderContextAccessor(testBuilderContext);

			var resettableClassFactoryDelegate = () => new ResettableLazy<global::TUnit.TestProject.RepeatTests>(() => 
			new global::TUnit.TestProject.RepeatTests()
			, sessionId, testBuilderContext);

			var resettableClassFactory = resettableClassFactoryDelegate();

			nodes.Add(new TestMetadata<global::TUnit.TestProject.RepeatTests>
			{
				TestId = $"TUnit.TestProject.RepeatTests.Three:0",
				TestClassArguments = [],
				TestMethodArguments = [],
				TestClassProperties = [],
				CurrentRepeatAttempt = 0,
				RepeatLimit = 3,
				MethodInfo = methodInfo,
				ResettableClassFactory = resettableClassFactory,
				TestMethodFactory = (classInstance, cancellationToken) => AsyncConvert.Convert(() => classInstance.Three()),
				TestFilePath = @"",
				TestLineNumber = 20,
				AttributeTypes = [ typeof(global::TUnit.Core.TestAttribute), typeof(global::TUnit.Core.RepeatAttribute) ],
				DataAttributes = [  ],
				TestBuilderContext = testBuilderContext,
			});
			resettableClassFactory = resettableClassFactoryDelegate();
			testBuilderContext = new();
			testBuilderContextAccessor.Current = testBuilderContext;
		}
		catch (global::System.Exception exception)
		{
			nodes.Add(new FailedInitializationTest
			{
				TestId = $"TUnit.TestProject.RepeatTests.Three:0",
				TestClass = typeof(global::TUnit.TestProject.RepeatTests),
				ReturnType = ((Action<global::TUnit.TestProject.RepeatTests>)((global::TUnit.TestProject.RepeatTests a0) => a0.Three())).Method.ReturnType,
				ParameterTypeFullNames = [],
				TestName = "Three",
				TestFilePath = @"",
				TestLineNumber = 20,
				Exception = exception,
			});
		}
		return nodes;
	}
	private global::System.Collections.Generic.List<SourceGeneratedTestNode> Tests1(string sessionId)
	{
		global::System.Collections.Generic.List<SourceGeneratedTestNode> nodes = [];
		var classDataIndex = 0;
		var testMethodDataIndex = 0;
		try
		{
			var testClassType = typeof(global::TUnit.TestProject.RepeatTests);
			var methodInfo = ((Action<global::TUnit.TestProject.RepeatTests>)((global::TUnit.TestProject.RepeatTests a0) => a0.Three())).Method;

			var testBuilderContext = new global::TUnit.Core.TestBuilderContext();
			var testBuilderContextAccessor = new global::TUnit.Core.TestBuilderContextAccessor(testBuilderContext);

			var resettableClassFactoryDelegate = () => new ResettableLazy<global::TUnit.TestProject.RepeatTests>(() => 
			new global::TUnit.TestProject.RepeatTests()
			, sessionId, testBuilderContext);

			var resettableClassFactory = resettableClassFactoryDelegate();

			nodes.Add(new TestMetadata<global::TUnit.TestProject.RepeatTests>
			{
				TestId = $"TUnit.TestProject.RepeatTests.Three:1",
				TestClassArguments = [],
				TestMethodArguments = [],
				TestClassProperties = [],
				CurrentRepeatAttempt = 1,
				RepeatLimit = 3,
				MethodInfo = methodInfo,
				ResettableClassFactory = resettableClassFactory,
				TestMethodFactory = (classInstance, cancellationToken) => AsyncConvert.Convert(() => classInstance.Three()),
				TestFilePath = @"",
				TestLineNumber = 20,
				AttributeTypes = [ typeof(global::TUnit.Core.TestAttribute), typeof(global::TUnit.Core.RepeatAttribute) ],
				DataAttributes = [  ],
				TestBuilderContext = testBuilderContext,
			});
			resettableClassFactory = resettableClassFactoryDelegate();
			testBuilderContext = new();
			testBuilderContextAccessor.Current = testBuilderContext;
		}
		catch (global::System.Exception exception)
		{
			nodes.Add(new FailedInitializationTest
			{
				TestId = $"TUnit.TestProject.RepeatTests.Three:1",
				TestClass = typeof(global::TUnit.TestProject.RepeatTests),
				ReturnType = ((Action<global::TUnit.TestProject.RepeatTests>)((global::TUnit.TestProject.RepeatTests a0) => a0.Three())).Method.ReturnType,
				ParameterTypeFullNames = [],
				TestName = "Three",
				TestFilePath = @"",
				TestLineNumber = 20,
				Exception = exception,
			});
		}
		return nodes;
	}
	private global::System.Collections.Generic.List<SourceGeneratedTestNode> Tests2(string sessionId)
	{
		global::System.Collections.Generic.List<SourceGeneratedTestNode> nodes = [];
		var classDataIndex = 0;
		var testMethodDataIndex = 0;
		try
		{
			var testClassType = typeof(global::TUnit.TestProject.RepeatTests);
			var methodInfo = ((Action<global::TUnit.TestProject.RepeatTests>)((global::TUnit.TestProject.RepeatTests a0) => a0.Three())).Method;

			var testBuilderContext = new global::TUnit.Core.TestBuilderContext();
			var testBuilderContextAccessor = new global::TUnit.Core.TestBuilderContextAccessor(testBuilderContext);

			var resettableClassFactoryDelegate = () => new ResettableLazy<global::TUnit.TestProject.RepeatTests>(() => 
			new global::TUnit.TestProject.RepeatTests()
			, sessionId, testBuilderContext);

			var resettableClassFactory = resettableClassFactoryDelegate();

			nodes.Add(new TestMetadata<global::TUnit.TestProject.RepeatTests>
			{
				TestId = $"TUnit.TestProject.RepeatTests.Three:2",
				TestClassArguments = [],
				TestMethodArguments = [],
				TestClassProperties = [],
				CurrentRepeatAttempt = 2,
				RepeatLimit = 3,
				MethodInfo = methodInfo,
				ResettableClassFactory = resettableClassFactory,
				TestMethodFactory = (classInstance, cancellationToken) => AsyncConvert.Convert(() => classInstance.Three()),
				TestFilePath = @"",
				TestLineNumber = 20,
				AttributeTypes = [ typeof(global::TUnit.Core.TestAttribute), typeof(global::TUnit.Core.RepeatAttribute) ],
				DataAttributes = [  ],
				TestBuilderContext = testBuilderContext,
			});
			resettableClassFactory = resettableClassFactoryDelegate();
			testBuilderContext = new();
			testBuilderContextAccessor.Current = testBuilderContext;
		}
		catch (global::System.Exception exception)
		{
			nodes.Add(new FailedInitializationTest
			{
				TestId = $"TUnit.TestProject.RepeatTests.Three:2",
				TestClass = typeof(global::TUnit.TestProject.RepeatTests),
				ReturnType = ((Action<global::TUnit.TestProject.RepeatTests>)((global::TUnit.TestProject.RepeatTests a0) => a0.Three())).Method.ReturnType,
				ParameterTypeFullNames = [],
				TestName = "Three",
				TestFilePath = @"",
				TestLineNumber = 20,
				Exception = exception,
			});
		}
		return nodes;
	}
	private global::System.Collections.Generic.List<SourceGeneratedTestNode> Tests3(string sessionId)
	{
		global::System.Collections.Generic.List<SourceGeneratedTestNode> nodes = [];
		var classDataIndex = 0;
		var testMethodDataIndex = 0;
		try
		{
			var testClassType = typeof(global::TUnit.TestProject.RepeatTests);
			var methodInfo = ((Action<global::TUnit.TestProject.RepeatTests>)((global::TUnit.TestProject.RepeatTests a0) => a0.Three())).Method;

			var testBuilderContext = new global::TUnit.Core.TestBuilderContext();
			var testBuilderContextAccessor = new global::TUnit.Core.TestBuilderContextAccessor(testBuilderContext);

			var resettableClassFactoryDelegate = () => new ResettableLazy<global::TUnit.TestProject.RepeatTests>(() => 
			new global::TUnit.TestProject.RepeatTests()
			, sessionId, testBuilderContext);

			var resettableClassFactory = resettableClassFactoryDelegate();

			nodes.Add(new TestMetadata<global::TUnit.TestProject.RepeatTests>
			{
				TestId = $"TUnit.TestProject.RepeatTests.Three:3",
				TestClassArguments = [],
				TestMethodArguments = [],
				TestClassProperties = [],
				CurrentRepeatAttempt = 3,
				RepeatLimit = 3,
				MethodInfo = methodInfo,
				ResettableClassFactory = resettableClassFactory,
				TestMethodFactory = (classInstance, cancellationToken) => AsyncConvert.Convert(() => classInstance.Three()),
				TestFilePath = @"",
				TestLineNumber = 20,
				AttributeTypes = [ typeof(global::TUnit.Core.TestAttribute), typeof(global::TUnit.Core.RepeatAttribute) ],
				DataAttributes = [  ],
				TestBuilderContext = testBuilderContext,
			});
			resettableClassFactory = resettableClassFactoryDelegate();
			testBuilderContext = new();
			testBuilderContextAccessor.Current = testBuilderContext;
		}
		catch (global::System.Exception exception)
		{
			nodes.Add(new FailedInitializationTest
			{
				TestId = $"TUnit.TestProject.RepeatTests.Three:3",
				TestClass = typeof(global::TUnit.TestProject.RepeatTests),
				ReturnType = ((Action<global::TUnit.TestProject.RepeatTests>)((global::TUnit.TestProject.RepeatTests a0) => a0.Three())).Method.ReturnType,
				ParameterTypeFullNames = [],
				TestName = "Three",
				TestFilePath = @"",
				TestLineNumber = 20,
				Exception = exception,
			});
		}
		return nodes;
	}
}

]