[  
// <auto-generated/>
#pragma warning disable
using global::System.Linq;
using global::System.Reflection;
using global::TUnit.Core;
using global::TUnit.Core.Extensions;

namespace TUnit.SourceGenerated;

[global::System.Diagnostics.StackTraceHidden]
[global::System.Diagnostics.CodeAnalysis.ExcludeFromCodeCoverage]
file partial class MethodDataSourceDrivenTests : TUnit.Core.Interfaces.SourceGenerator.ITestSource
{
	[global::System.Runtime.CompilerServices.ModuleInitializer]
	public static void Initialise()
	{
		SourceRegistrar.Register(new MethodDataSourceDrivenTests());
	}
	public global::System.Collections.Generic.IReadOnlyList<SourceGeneratedTestNode> CollectTests(string sessionId)
	{
		return Tests0(sessionId);
	}
	private global::System.Collections.Generic.List<SourceGeneratedTestNode> Tests0(string sessionId)
	{
		global::System.Collections.Generic.List<SourceGeneratedTestNode> nodes = [];
		var classDataIndex = 0;
		var testMethodDataIndex = 0;
		try
		{
			var testClassType = typeof(global::TUnit.TestProject.MethodDataSourceDrivenTests);
			var methodInfo = ((Action<global::TUnit.TestProject.MethodDataSourceDrivenTests, global::System.Int32>)((global::TUnit.TestProject.MethodDataSourceDrivenTests a0, global::System.Int32 a1) => a0.DataSource_Method(a1))).Method;

			var testBuilderContext = new global::TUnit.Core.TestBuilderContext();
			var testBuilderContextAccessor = new global::TUnit.Core.TestBuilderContextAccessor(testBuilderContext);

			global::System.Int32 methodArg = global::TUnit.TestProject.MethodDataSourceDrivenTests.SomeMethod();
			var resettableClassFactoryDelegate = () => new ResettableLazy<global::TUnit.TestProject.MethodDataSourceDrivenTests>(() => 
			new global::TUnit.TestProject.MethodDataSourceDrivenTests()
			, sessionId, testBuilderContext);

			var resettableClassFactory = resettableClassFactoryDelegate();

			nodes.Add(new TestMetadata<global::TUnit.TestProject.MethodDataSourceDrivenTests>
			{
				TestId = $"global::TUnit.Core.MethodDataSourceAttribute:{testMethodDataIndex}:TL-MDS0:TUnit.TestProject.MethodDataSourceDrivenTests.DataSource_Method(System.Int32):0",
				TestClassArguments = [],
				TestMethodArguments = [methodArg],
				TestClassProperties = [],
				CurrentRepeatAttempt = 0,
				RepeatLimit = 0,
				MethodInfo = methodInfo,
				ResettableClassFactory = resettableClassFactory,
				TestMethodFactory = (classInstance, cancellationToken) => AsyncConvert.Convert(() => classInstance.DataSource_Method(methodArg)),
				TestFilePath = @"",
				TestLineNumber = 11,
				AttributeTypes = [ typeof(global::TUnit.Core.TestAttribute) ],
				DataAttributes = [  ],
				TestBuilderContext = testBuilderContext,
			});
			resettableClassFactory = resettableClassFactoryDelegate();
			testBuilderContext = new();
			testBuilderContextAccessor.Current = testBuilderContext;
		}
		catch (global::System.Exception exception)
		{
			nodes.Add(new FailedInitializationTest
			{
				TestId = $"global::TUnit.Core.MethodDataSourceAttribute:{testMethodDataIndex}:TL-MDS0:TUnit.TestProject.MethodDataSourceDrivenTests.DataSource_Method(System.Int32):0",
				TestClass = typeof(global::TUnit.TestProject.MethodDataSourceDrivenTests),
				ReturnType = ((Action<global::TUnit.TestProject.MethodDataSourceDrivenTests, global::System.Int32>)((global::TUnit.TestProject.MethodDataSourceDrivenTests a0, global::System.Int32 a1) => a0.DataSource_Method(a1))).Method.ReturnType,
				ParameterTypeFullNames = [typeof(global::System.Int32)],
				TestName = "DataSource_Method",
				TestFilePath = @"",
				TestLineNumber = 11,
				Exception = exception,
			});
		}
		return nodes;
	}
}

  
// <auto-generated/>
#pragma warning disable
using global::System.Linq;
using global::System.Reflection;
using global::TUnit.Core;
using global::TUnit.Core.Extensions;

namespace TUnit.SourceGenerated;

[global::System.Diagnostics.StackTraceHidden]
[global::System.Diagnostics.CodeAnalysis.ExcludeFromCodeCoverage]
file partial class MethodDataSourceDrivenTests : TUnit.Core.Interfaces.SourceGenerator.ITestSource
{
	[global::System.Runtime.CompilerServices.ModuleInitializer]
	public static void Initialise()
	{
		SourceRegistrar.Register(new MethodDataSourceDrivenTests());
	}
	public global::System.Collections.Generic.IReadOnlyList<SourceGeneratedTestNode> CollectTests(string sessionId)
	{
		return Tests0(sessionId);
	}
	private global::System.Collections.Generic.List<SourceGeneratedTestNode> Tests0(string sessionId)
	{
		global::System.Collections.Generic.List<SourceGeneratedTestNode> nodes = [];
		var classDataIndex = 0;
		var testMethodDataIndex = 0;
		try
		{
			var testClassType = typeof(global::TUnit.TestProject.MethodDataSourceDrivenTests);
			var methodInfo = ((Action<global::TUnit.TestProject.MethodDataSourceDrivenTests, global::System.Int32>)((global::TUnit.TestProject.MethodDataSourceDrivenTests a0, global::System.Int32 a1) => a0.DataSource_Method2(a1))).Method;

			var testBuilderContext = new global::TUnit.Core.TestBuilderContext();
			var testBuilderContextAccessor = new global::TUnit.Core.TestBuilderContextAccessor(testBuilderContext);

			global::System.Int32 methodArg = global::TUnit.TestProject.MethodDataSourceDrivenTests.SomeMethod();
			var resettableClassFactoryDelegate = () => new ResettableLazy<global::TUnit.TestProject.MethodDataSourceDrivenTests>(() => 
			new global::TUnit.TestProject.MethodDataSourceDrivenTests()
			, sessionId, testBuilderContext);

			var resettableClassFactory = resettableClassFactoryDelegate();

			nodes.Add(new TestMetadata<global::TUnit.TestProject.MethodDataSourceDrivenTests>
			{
				TestId = $"global::TUnit.Core.MethodDataSourceAttribute:{testMethodDataIndex}:TL-MDS0:TUnit.TestProject.MethodDataSourceDrivenTests.DataSource_Method2(System.Int32):0",
				TestClassArguments = [],
				TestMethodArguments = [methodArg],
				TestClassProperties = [],
				CurrentRepeatAttempt = 0,
				RepeatLimit = 0,
				MethodInfo = methodInfo,
				ResettableClassFactory = resettableClassFactory,
				TestMethodFactory = (classInstance, cancellationToken) => AsyncConvert.Convert(() => classInstance.DataSource_Method2(methodArg)),
				TestFilePath = @"",
				TestLineNumber = 18,
				AttributeTypes = [ typeof(global::TUnit.Core.TestAttribute) ],
				DataAttributes = [  ],
				TestBuilderContext = testBuilderContext,
			});
			resettableClassFactory = resettableClassFactoryDelegate();
			testBuilderContext = new();
			testBuilderContextAccessor.Current = testBuilderContext;
		}
		catch (global::System.Exception exception)
		{
			nodes.Add(new FailedInitializationTest
			{
				TestId = $"global::TUnit.Core.MethodDataSourceAttribute:{testMethodDataIndex}:TL-MDS0:TUnit.TestProject.MethodDataSourceDrivenTests.DataSource_Method2(System.Int32):0",
				TestClass = typeof(global::TUnit.TestProject.MethodDataSourceDrivenTests),
				ReturnType = ((Action<global::TUnit.TestProject.MethodDataSourceDrivenTests, global::System.Int32>)((global::TUnit.TestProject.MethodDataSourceDrivenTests a0, global::System.Int32 a1) => a0.DataSource_Method2(a1))).Method.ReturnType,
				ParameterTypeFullNames = [typeof(global::System.Int32)],
				TestName = "DataSource_Method2",
				TestFilePath = @"",
				TestLineNumber = 18,
				Exception = exception,
			});
		}
		return nodes;
	}
}

  
// <auto-generated/>
#pragma warning disable
using global::System.Linq;
using global::System.Reflection;
using global::TUnit.Core;
using global::TUnit.Core.Extensions;

namespace TUnit.SourceGenerated;

[global::System.Diagnostics.StackTraceHidden]
[global::System.Diagnostics.CodeAnalysis.ExcludeFromCodeCoverage]
file partial class MethodDataSourceDrivenTests : TUnit.Core.Interfaces.SourceGenerator.ITestSource
{
	[global::System.Runtime.CompilerServices.ModuleInitializer]
	public static void Initialise()
	{
		SourceRegistrar.Register(new MethodDataSourceDrivenTests());
	}
	public global::System.Collections.Generic.IReadOnlyList<SourceGeneratedTestNode> CollectTests(string sessionId)
	{
		return Tests0(sessionId);
	}
	private global::System.Collections.Generic.List<SourceGeneratedTestNode> Tests0(string sessionId)
	{
		global::System.Collections.Generic.List<SourceGeneratedTestNode> nodes = [];
		var classDataIndex = 0;
		var testMethodDataIndex = 0;
		try
		{
			var testClassType = typeof(global::TUnit.TestProject.MethodDataSourceDrivenTests);
			var methodInfo = ((Action<global::TUnit.TestProject.MethodDataSourceDrivenTests, global::System.Action>)((global::TUnit.TestProject.MethodDataSourceDrivenTests a0, global::System.Action a1) => a0.DataSource_Method_WithAction(a1))).Method;

			var testBuilderContext = new global::TUnit.Core.TestBuilderContext();
			var testBuilderContextAccessor = new global::TUnit.Core.TestBuilderContextAccessor(testBuilderContext);

			global::System.Action methodArg = global::TUnit.TestProject.MethodDataSourceDrivenTests.SomeAction()();
			var resettableClassFactoryDelegate = () => new ResettableLazy<global::TUnit.TestProject.MethodDataSourceDrivenTests>(() => 
			new global::TUnit.TestProject.MethodDataSourceDrivenTests()
			, sessionId, testBuilderContext);

			var resettableClassFactory = resettableClassFactoryDelegate();

			nodes.Add(new TestMetadata<global::TUnit.TestProject.MethodDataSourceDrivenTests>
			{
				TestId = $"global::TUnit.Core.MethodDataSourceAttribute:{testMethodDataIndex}:TL-MDS0:TUnit.TestProject.MethodDataSourceDrivenTests.DataSource_Method_WithAction(void System.Action()):0",
				TestClassArguments = [],
				TestMethodArguments = [methodArg],
				TestClassProperties = [],
				CurrentRepeatAttempt = 0,
				RepeatLimit = 0,
				MethodInfo = methodInfo,
				ResettableClassFactory = resettableClassFactory,
				TestMethodFactory = (classInstance, cancellationToken) => AsyncConvert.Convert(() => classInstance.DataSource_Method_WithAction(methodArg)),
				TestFilePath = @"",
				TestLineNumber = 25,
				AttributeTypes = [ typeof(global::TUnit.Core.TestAttribute) ],
				DataAttributes = [  ],
				TestBuilderContext = testBuilderContext,
			});
			resettableClassFactory = resettableClassFactoryDelegate();
			testBuilderContext = new();
			testBuilderContextAccessor.Current = testBuilderContext;
		}
		catch (global::System.Exception exception)
		{
			nodes.Add(new FailedInitializationTest
			{
				TestId = $"global::TUnit.Core.MethodDataSourceAttribute:{testMethodDataIndex}:TL-MDS0:TUnit.TestProject.MethodDataSourceDrivenTests.DataSource_Method_WithAction(void System.Action()):0",
				TestClass = typeof(global::TUnit.TestProject.MethodDataSourceDrivenTests),
				ReturnType = ((Action<global::TUnit.TestProject.MethodDataSourceDrivenTests, global::System.Action>)((global::TUnit.TestProject.MethodDataSourceDrivenTests a0, global::System.Action a1) => a0.DataSource_Method_WithAction(a1))).Method.ReturnType,
				ParameterTypeFullNames = [typeof(global::System.Action)],
				TestName = "DataSource_Method_WithAction",
				TestFilePath = @"",
				TestLineNumber = 25,
				Exception = exception,
			});
		}
		return nodes;
	}
}

  
// <auto-generated/>
#pragma warning disable
using global::System.Linq;
using global::System.Reflection;
using global::TUnit.Core;
using global::TUnit.Core.Extensions;

namespace TUnit.SourceGenerated;

[global::System.Diagnostics.StackTraceHidden]
[global::System.Diagnostics.CodeAnalysis.ExcludeFromCodeCoverage]
file partial class MethodDataSourceDrivenTests : TUnit.Core.Interfaces.SourceGenerator.ITestSource
{
	[global::System.Runtime.CompilerServices.ModuleInitializer]
	public static void Initialise()
	{
		SourceRegistrar.Register(new MethodDataSourceDrivenTests());
	}
	public global::System.Collections.Generic.IReadOnlyList<SourceGeneratedTestNode> CollectTests(string sessionId)
	{
		return
		[
			..Tests0(sessionId),
			..Tests1(sessionId),
		];
	}
	private global::System.Collections.Generic.List<SourceGeneratedTestNode> Tests0(string sessionId)
	{
		global::System.Collections.Generic.List<SourceGeneratedTestNode> nodes = [];
		var classDataIndex = 0;
		var testMethodDataIndex = 0;
		try
		{
			var testClassType = typeof(global::TUnit.TestProject.MethodDataSourceDrivenTests);
			var methodInfo = ((Action<global::TUnit.TestProject.MethodDataSourceDrivenTests, global::System.Int32>)((global::TUnit.TestProject.MethodDataSourceDrivenTests a0, global::System.Int32 a1) => a0.DataSource_Method3(a1))).Method;

			var testBuilderContext = new global::TUnit.Core.TestBuilderContext();
			var testBuilderContextAccessor = new global::TUnit.Core.TestBuilderContextAccessor(testBuilderContext);

			global::System.Int32 methodArg = global::TUnit.TestProject.MethodDataSourceDrivenTests.SomeMethod(5);
			var resettableClassFactoryDelegate = () => new ResettableLazy<global::TUnit.TestProject.MethodDataSourceDrivenTests>(() => 
			new global::TUnit.TestProject.MethodDataSourceDrivenTests()
			, sessionId, testBuilderContext);

			var resettableClassFactory = resettableClassFactoryDelegate();

			nodes.Add(new TestMetadata<global::TUnit.TestProject.MethodDataSourceDrivenTests>
			{
				TestId = $"global::TUnit.Core.MethodDataSourceAttribute:{testMethodDataIndex}:TL-MDS0:TUnit.TestProject.MethodDataSourceDrivenTests.DataSource_Method3(System.Int32):0",
				TestClassArguments = [],
				TestMethodArguments = [methodArg],
				TestClassProperties = [],
				CurrentRepeatAttempt = 0,
				RepeatLimit = 0,
				MethodInfo = methodInfo,
				ResettableClassFactory = resettableClassFactory,
				TestMethodFactory = (classInstance, cancellationToken) => AsyncConvert.Convert(() => classInstance.DataSource_Method3(methodArg)),
				TestFilePath = @"",
				TestLineNumber = 32,
				AttributeTypes = [ typeof(global::TUnit.Core.TestAttribute) ],
				DataAttributes = [  ],
				TestBuilderContext = testBuilderContext,
			});
			resettableClassFactory = resettableClassFactoryDelegate();
			testBuilderContext = new();
			testBuilderContextAccessor.Current = testBuilderContext;
		}
		catch (global::System.Exception exception)
		{
			nodes.Add(new FailedInitializationTest
			{
				TestId = $"global::TUnit.Core.MethodDataSourceAttribute:{testMethodDataIndex}:TL-MDS0:TUnit.TestProject.MethodDataSourceDrivenTests.DataSource_Method3(System.Int32):0",
				TestClass = typeof(global::TUnit.TestProject.MethodDataSourceDrivenTests),
				ReturnType = ((Action<global::TUnit.TestProject.MethodDataSourceDrivenTests, global::System.Int32>)((global::TUnit.TestProject.MethodDataSourceDrivenTests a0, global::System.Int32 a1) => a0.DataSource_Method3(a1))).Method.ReturnType,
				ParameterTypeFullNames = [typeof(global::System.Int32)],
				TestName = "DataSource_Method3",
				TestFilePath = @"",
				TestLineNumber = 32,
				Exception = exception,
			});
		}
		return nodes;
	}
	private global::System.Collections.Generic.List<SourceGeneratedTestNode> Tests1(string sessionId)
	{
		global::System.Collections.Generic.List<SourceGeneratedTestNode> nodes = [];
		var classDataIndex = 0;
		var testMethodDataIndex = 0;
		try
		{
			var testClassType = typeof(global::TUnit.TestProject.MethodDataSourceDrivenTests);
			var methodInfo = ((Action<global::TUnit.TestProject.MethodDataSourceDrivenTests, global::System.Int32>)((global::TUnit.TestProject.MethodDataSourceDrivenTests a0, global::System.Int32 a1) => a0.DataSource_Method3(a1))).Method;

			var testBuilderContext = new global::TUnit.Core.TestBuilderContext();
			var testBuilderContextAccessor = new global::TUnit.Core.TestBuilderContextAccessor(testBuilderContext);

			global::System.Int32 methodArg = global::TUnit.TestProject.MethodDataSourceDrivenTests.SomeMethod(5 );
			var resettableClassFactoryDelegate = () => new ResettableLazy<global::TUnit.TestProject.MethodDataSourceDrivenTests>(() => 
			new global::TUnit.TestProject.MethodDataSourceDrivenTests()
			, sessionId, testBuilderContext);

			var resettableClassFactory = resettableClassFactoryDelegate();

			nodes.Add(new TestMetadata<global::TUnit.TestProject.MethodDataSourceDrivenTests>
			{
				TestId = $"global::TUnit.Core.MethodDataSourceAttribute:{testMethodDataIndex}:TL-MDS1:TUnit.TestProject.MethodDataSourceDrivenTests.DataSource_Method3(System.Int32):0",
				TestClassArguments = [],
				TestMethodArguments = [methodArg],
				TestClassProperties = [],
				CurrentRepeatAttempt = 0,
				RepeatLimit = 0,
				MethodInfo = methodInfo,
				ResettableClassFactory = resettableClassFactory,
				TestMethodFactory = (classInstance, cancellationToken) => AsyncConvert.Convert(() => classInstance.DataSource_Method3(methodArg)),
				TestFilePath = @"",
				TestLineNumber = 32,
				AttributeTypes = [ typeof(global::TUnit.Core.TestAttribute) ],
				DataAttributes = [  ],
				TestBuilderContext = testBuilderContext,
			});
			resettableClassFactory = resettableClassFactoryDelegate();
			testBuilderContext = new();
			testBuilderContextAccessor.Current = testBuilderContext;
		}
		catch (global::System.Exception exception)
		{
			nodes.Add(new FailedInitializationTest
			{
				TestId = $"global::TUnit.Core.MethodDataSourceAttribute:{testMethodDataIndex}:TL-MDS1:TUnit.TestProject.MethodDataSourceDrivenTests.DataSource_Method3(System.Int32):0",
				TestClass = typeof(global::TUnit.TestProject.MethodDataSourceDrivenTests),
				ReturnType = ((Action<global::TUnit.TestProject.MethodDataSourceDrivenTests, global::System.Int32>)((global::TUnit.TestProject.MethodDataSourceDrivenTests a0, global::System.Int32 a1) => a0.DataSource_Method3(a1))).Method.ReturnType,
				ParameterTypeFullNames = [typeof(global::System.Int32)],
				TestName = "DataSource_Method3",
				TestFilePath = @"",
				TestLineNumber = 32,
				Exception = exception,
			});
		}
		return nodes;
	}
}

  
// <auto-generated/>
#pragma warning disable
using global::System.Linq;
using global::System.Reflection;
using global::TUnit.Core;
using global::TUnit.Core.Extensions;

namespace TUnit.SourceGenerated;

[global::System.Diagnostics.StackTraceHidden]
[global::System.Diagnostics.CodeAnalysis.ExcludeFromCodeCoverage]
file partial class MethodDataSourceDrivenTests : TUnit.Core.Interfaces.SourceGenerator.ITestSource
{
	[global::System.Runtime.CompilerServices.ModuleInitializer]
	public static void Initialise()
	{
		SourceRegistrar.Register(new MethodDataSourceDrivenTests());
	}
	public global::System.Collections.Generic.IReadOnlyList<SourceGeneratedTestNode> CollectTests(string sessionId)
	{
		return
		[
			..Tests0(sessionId),
			..Tests1(sessionId),
			..Tests2(sessionId),
			..Tests3(sessionId),
		];
	}
	private global::System.Collections.Generic.List<SourceGeneratedTestNode> Tests0(string sessionId)
	{
		global::System.Collections.Generic.List<SourceGeneratedTestNode> nodes = [];
		var classDataIndex = 0;
		var testMethodDataIndex = 0;
		try
		{
			var testClassType = typeof(global::TUnit.TestProject.MethodDataSourceDrivenTests);
			var methodInfo = ((Action<global::TUnit.TestProject.MethodDataSourceDrivenTests, global::System.Int32>)((global::TUnit.TestProject.MethodDataSourceDrivenTests a0, global::System.Int32 a1) => a0.DataSource_Method4(a1))).Method;

			var testBuilderContext = new global::TUnit.Core.TestBuilderContext();
			var testBuilderContextAccessor = new global::TUnit.Core.TestBuilderContextAccessor(testBuilderContext);

			global::System.Int32 methodArg = global::TUnit.TestProject.MethodDataSourceDrivenTests.SomeMethod("Hello World!", 5, true);
			var resettableClassFactoryDelegate = () => new ResettableLazy<global::TUnit.TestProject.MethodDataSourceDrivenTests>(() => 
			new global::TUnit.TestProject.MethodDataSourceDrivenTests()
			, sessionId, testBuilderContext);

			var resettableClassFactory = resettableClassFactoryDelegate();

			nodes.Add(new TestMetadata<global::TUnit.TestProject.MethodDataSourceDrivenTests>
			{
				TestId = $"global::TUnit.Core.MethodDataSourceAttribute:{testMethodDataIndex}:TL-MDS0:TUnit.TestProject.MethodDataSourceDrivenTests.DataSource_Method4(System.Int32):0",
				TestClassArguments = [],
				TestMethodArguments = [methodArg],
				TestClassProperties = [],
				CurrentRepeatAttempt = 0,
				RepeatLimit = 0,
				MethodInfo = methodInfo,
				ResettableClassFactory = resettableClassFactory,
				TestMethodFactory = (classInstance, cancellationToken) => AsyncConvert.Convert(() => classInstance.DataSource_Method4(methodArg)),
				TestFilePath = @"",
				TestLineNumber = 41,
				AttributeTypes = [ typeof(global::TUnit.Core.TestAttribute) ],
				DataAttributes = [  ],
				TestBuilderContext = testBuilderContext,
			});
			resettableClassFactory = resettableClassFactoryDelegate();
			testBuilderContext = new();
			testBuilderContextAccessor.Current = testBuilderContext;
		}
		catch (global::System.Exception exception)
		{
			nodes.Add(new FailedInitializationTest
			{
				TestId = $"global::TUnit.Core.MethodDataSourceAttribute:{testMethodDataIndex}:TL-MDS0:TUnit.TestProject.MethodDataSourceDrivenTests.DataSource_Method4(System.Int32):0",
				TestClass = typeof(global::TUnit.TestProject.MethodDataSourceDrivenTests),
				ReturnType = ((Action<global::TUnit.TestProject.MethodDataSourceDrivenTests, global::System.Int32>)((global::TUnit.TestProject.MethodDataSourceDrivenTests a0, global::System.Int32 a1) => a0.DataSource_Method4(a1))).Method.ReturnType,
				ParameterTypeFullNames = [typeof(global::System.Int32)],
				TestName = "DataSource_Method4",
				TestFilePath = @"",
				TestLineNumber = 41,
				Exception = exception,
			});
		}
		return nodes;
	}
	private global::System.Collections.Generic.List<SourceGeneratedTestNode> Tests1(string sessionId)
	{
		global::System.Collections.Generic.List<SourceGeneratedTestNode> nodes = [];
		var classDataIndex = 0;
		var testMethodDataIndex = 0;
		try
		{
			var testClassType = typeof(global::TUnit.TestProject.MethodDataSourceDrivenTests);
			var methodInfo = ((Action<global::TUnit.TestProject.MethodDataSourceDrivenTests, global::System.Int32>)((global::TUnit.TestProject.MethodDataSourceDrivenTests a0, global::System.Int32 a1) => a0.DataSource_Method4(a1))).Method;

			var testBuilderContext = new global::TUnit.Core.TestBuilderContext();
			var testBuilderContextAccessor = new global::TUnit.Core.TestBuilderContextAccessor(testBuilderContext);

			global::System.Int32 methodArg = global::TUnit.TestProject.MethodDataSourceDrivenTests.SomeMethod("Hello World!", 6, true );
			var resettableClassFactoryDelegate = () => new ResettableLazy<global::TUnit.TestProject.MethodDataSourceDrivenTests>(() => 
			new global::TUnit.TestProject.MethodDataSourceDrivenTests()
			, sessionId, testBuilderContext);

			var resettableClassFactory = resettableClassFactoryDelegate();

			nodes.Add(new TestMetadata<global::TUnit.TestProject.MethodDataSourceDrivenTests>
			{
				TestId = $"global::TUnit.Core.MethodDataSourceAttribute:{testMethodDataIndex}:TL-MDS1:TUnit.TestProject.MethodDataSourceDrivenTests.DataSource_Method4(System.Int32):0",
				TestClassArguments = [],
				TestMethodArguments = [methodArg],
				TestClassProperties = [],
				CurrentRepeatAttempt = 0,
				RepeatLimit = 0,
				MethodInfo = methodInfo,
				ResettableClassFactory = resettableClassFactory,
				TestMethodFactory = (classInstance, cancellationToken) => AsyncConvert.Convert(() => classInstance.DataSource_Method4(methodArg)),
				TestFilePath = @"",
				TestLineNumber = 41,
				AttributeTypes = [ typeof(global::TUnit.Core.TestAttribute) ],
				DataAttributes = [  ],
				TestBuilderContext = testBuilderContext,
			});
			resettableClassFactory = resettableClassFactoryDelegate();
			testBuilderContext = new();
			testBuilderContextAccessor.Current = testBuilderContext;
		}
		catch (global::System.Exception exception)
		{
			nodes.Add(new FailedInitializationTest
			{
				TestId = $"global::TUnit.Core.MethodDataSourceAttribute:{testMethodDataIndex}:TL-MDS1:TUnit.TestProject.MethodDataSourceDrivenTests.DataSource_Method4(System.Int32):0",
				TestClass = typeof(global::TUnit.TestProject.MethodDataSourceDrivenTests),
				ReturnType = ((Action<global::TUnit.TestProject.MethodDataSourceDrivenTests, global::System.Int32>)((global::TUnit.TestProject.MethodDataSourceDrivenTests a0, global::System.Int32 a1) => a0.DataSource_Method4(a1))).Method.ReturnType,
				ParameterTypeFullNames = [typeof(global::System.Int32)],
				TestName = "DataSource_Method4",
				TestFilePath = @"",
				TestLineNumber = 41,
				Exception = exception,
			});
		}
		return nodes;
	}
	private global::System.Collections.Generic.List<SourceGeneratedTestNode> Tests2(string sessionId)
	{
		global::System.Collections.Generic.List<SourceGeneratedTestNode> nodes = [];
		var classDataIndex = 0;
		var testMethodDataIndex = 0;
		try
		{
			var testClassType = typeof(global::TUnit.TestProject.MethodDataSourceDrivenTests);
			var methodInfo = ((Action<global::TUnit.TestProject.MethodDataSourceDrivenTests, global::System.Int32>)((global::TUnit.TestProject.MethodDataSourceDrivenTests a0, global::System.Int32 a1) => a0.DataSource_Method4(a1))).Method;

			var testBuilderContext = new global::TUnit.Core.TestBuilderContext();
			var testBuilderContextAccessor = new global::TUnit.Core.TestBuilderContextAccessor(testBuilderContext);

			global::System.Int32 methodArg = global::TUnit.TestProject.MethodDataSourceDrivenTests.SomeMethod("Hello World!", 7, true);
			var resettableClassFactoryDelegate = () => new ResettableLazy<global::TUnit.TestProject.MethodDataSourceDrivenTests>(() => 
			new global::TUnit.TestProject.MethodDataSourceDrivenTests()
			, sessionId, testBuilderContext);

			var resettableClassFactory = resettableClassFactoryDelegate();

			nodes.Add(new TestMetadata<global::TUnit.TestProject.MethodDataSourceDrivenTests>
			{
				TestId = $"global::TUnit.Core.MethodDataSourceAttribute:{testMethodDataIndex}:TL-MDS2:TUnit.TestProject.MethodDataSourceDrivenTests.DataSource_Method4(System.Int32):0",
				TestClassArguments = [],
				TestMethodArguments = [methodArg],
				TestClassProperties = [],
				CurrentRepeatAttempt = 0,
				RepeatLimit = 0,
				MethodInfo = methodInfo,
				ResettableClassFactory = resettableClassFactory,
				TestMethodFactory = (classInstance, cancellationToken) => AsyncConvert.Convert(() => classInstance.DataSource_Method4(methodArg)),
				TestFilePath = @"",
				TestLineNumber = 41,
				AttributeTypes = [ typeof(global::TUnit.Core.TestAttribute) ],
				DataAttributes = [  ],
				TestBuilderContext = testBuilderContext,
			});
			resettableClassFactory = resettableClassFactoryDelegate();
			testBuilderContext = new();
			testBuilderContextAccessor.Current = testBuilderContext;
		}
		catch (global::System.Exception exception)
		{
			nodes.Add(new FailedInitializationTest
			{
				TestId = $"global::TUnit.Core.MethodDataSourceAttribute:{testMethodDataIndex}:TL-MDS2:TUnit.TestProject.MethodDataSourceDrivenTests.DataSource_Method4(System.Int32):0",
				TestClass = typeof(global::TUnit.TestProject.MethodDataSourceDrivenTests),
				ReturnType = ((Action<global::TUnit.TestProject.MethodDataSourceDrivenTests, global::System.Int32>)((global::TUnit.TestProject.MethodDataSourceDrivenTests a0, global::System.Int32 a1) => a0.DataSource_Method4(a1))).Method.ReturnType,
				ParameterTypeFullNames = [typeof(global::System.Int32)],
				TestName = "DataSource_Method4",
				TestFilePath = @"",
				TestLineNumber = 41,
				Exception = exception,
			});
		}
		return nodes;
	}
	private global::System.Collections.Generic.List<SourceGeneratedTestNode> Tests3(string sessionId)
	{
		global::System.Collections.Generic.List<SourceGeneratedTestNode> nodes = [];
		var classDataIndex = 0;
		var testMethodDataIndex = 0;
		try
		{
			var testClassType = typeof(global::TUnit.TestProject.MethodDataSourceDrivenTests);
			var methodInfo = ((Action<global::TUnit.TestProject.MethodDataSourceDrivenTests, global::System.Int32>)((global::TUnit.TestProject.MethodDataSourceDrivenTests a0, global::System.Int32 a1) => a0.DataSource_Method4(a1))).Method;

			var testBuilderContext = new global::TUnit.Core.TestBuilderContext();
			var testBuilderContextAccessor = new global::TUnit.Core.TestBuilderContextAccessor(testBuilderContext);

			global::System.Int32 methodArg = global::TUnit.TestProject.MethodDataSourceDrivenTests.SomeMethod("Hello World!", 8, true );
			var resettableClassFactoryDelegate = () => new ResettableLazy<global::TUnit.TestProject.MethodDataSourceDrivenTests>(() => 
			new global::TUnit.TestProject.MethodDataSourceDrivenTests()
			, sessionId, testBuilderContext);

			var resettableClassFactory = resettableClassFactoryDelegate();

			nodes.Add(new TestMetadata<global::TUnit.TestProject.MethodDataSourceDrivenTests>
			{
				TestId = $"global::TUnit.Core.MethodDataSourceAttribute:{testMethodDataIndex}:TL-MDS3:TUnit.TestProject.MethodDataSourceDrivenTests.DataSource_Method4(System.Int32):0",
				TestClassArguments = [],
				TestMethodArguments = [methodArg],
				TestClassProperties = [],
				CurrentRepeatAttempt = 0,
				RepeatLimit = 0,
				MethodInfo = methodInfo,
				ResettableClassFactory = resettableClassFactory,
				TestMethodFactory = (classInstance, cancellationToken) => AsyncConvert.Convert(() => classInstance.DataSource_Method4(methodArg)),
				TestFilePath = @"",
				TestLineNumber = 41,
				AttributeTypes = [ typeof(global::TUnit.Core.TestAttribute) ],
				DataAttributes = [  ],
				TestBuilderContext = testBuilderContext,
			});
			resettableClassFactory = resettableClassFactoryDelegate();
			testBuilderContext = new();
			testBuilderContextAccessor.Current = testBuilderContext;
		}
		catch (global::System.Exception exception)
		{
			nodes.Add(new FailedInitializationTest
			{
				TestId = $"global::TUnit.Core.MethodDataSourceAttribute:{testMethodDataIndex}:TL-MDS3:TUnit.TestProject.MethodDataSourceDrivenTests.DataSource_Method4(System.Int32):0",
				TestClass = typeof(global::TUnit.TestProject.MethodDataSourceDrivenTests),
				ReturnType = ((Action<global::TUnit.TestProject.MethodDataSourceDrivenTests, global::System.Int32>)((global::TUnit.TestProject.MethodDataSourceDrivenTests a0, global::System.Int32 a1) => a0.DataSource_Method4(a1))).Method.ReturnType,
				ParameterTypeFullNames = [typeof(global::System.Int32)],
				TestName = "DataSource_Method4",
				TestFilePath = @"",
				TestLineNumber = 41,
				Exception = exception,
			});
		}
		return nodes;
	}
}

  
// <auto-generated/>
#pragma warning disable
using global::System.Linq;
using global::System.Reflection;
using global::TUnit.Core;
using global::TUnit.Core.Extensions;

namespace TUnit.SourceGenerated;

[global::System.Diagnostics.StackTraceHidden]
[global::System.Diagnostics.CodeAnalysis.ExcludeFromCodeCoverage]
file partial class MethodDataSourceDrivenTests : TUnit.Core.Interfaces.SourceGenerator.ITestSource
{
	[global::System.Runtime.CompilerServices.ModuleInitializer]
	public static void Initialise()
	{
		SourceRegistrar.Register(new MethodDataSourceDrivenTests());
	}
	public global::System.Collections.Generic.IReadOnlyList<SourceGeneratedTestNode> CollectTests(string sessionId)
	{
		return Tests0(sessionId);
	}
	private global::System.Collections.Generic.List<SourceGeneratedTestNode> Tests0(string sessionId)
	{
		global::System.Collections.Generic.List<SourceGeneratedTestNode> nodes = [];
		var classDataIndex = 0;
		var testMethodDataIndex = 0;
		try
		{
			var testClassType = typeof(global::TUnit.TestProject.MethodDataSourceDrivenTests);
			var methodInfo = ((Action<global::TUnit.TestProject.MethodDataSourceDrivenTests, global::TUnit.TestProject.MethodDataSourceDrivenTests.BaseValue>)((global::TUnit.TestProject.MethodDataSourceDrivenTests a0, global::TUnit.TestProject.MethodDataSourceDrivenTests.BaseValue a1) => a0.DataSource_WithBaseReturn(a1))).Method;

			var testBuilderContext = new global::TUnit.Core.TestBuilderContext();
			var testBuilderContextAccessor = new global::TUnit.Core.TestBuilderContextAccessor(testBuilderContext);

			global::TUnit.TestProject.MethodDataSourceDrivenTests.BaseValue methodArg = global::TUnit.TestProject.MethodDataSourceDrivenTests.MethodWithBaseReturn()();
			var resettableClassFactoryDelegate = () => new ResettableLazy<global::TUnit.TestProject.MethodDataSourceDrivenTests>(() => 
			new global::TUnit.TestProject.MethodDataSourceDrivenTests()
			, sessionId, testBuilderContext);

			var resettableClassFactory = resettableClassFactoryDelegate();

			nodes.Add(new TestMetadata<global::TUnit.TestProject.MethodDataSourceDrivenTests>
			{
				TestId = $"global::TUnit.Core.MethodDataSourceAttribute:{testMethodDataIndex}:TL-MDS0:TUnit.TestProject.MethodDataSourceDrivenTests.DataSource_WithBaseReturn(TUnit.TestProject.MethodDataSourceDrivenTests.BaseValue):0",
				TestClassArguments = [],
				TestMethodArguments = [methodArg],
				TestClassProperties = [],
				CurrentRepeatAttempt = 0,
				RepeatLimit = 0,
				MethodInfo = methodInfo,
				ResettableClassFactory = resettableClassFactory,
				TestMethodFactory = (classInstance, cancellationToken) => AsyncConvert.Convert(() => classInstance.DataSource_WithBaseReturn(methodArg)),
				TestFilePath = @"",
				TestLineNumber = 52,
				AttributeTypes = [ typeof(global::TUnit.Core.TestAttribute) ],
				DataAttributes = [  ],
				TestBuilderContext = testBuilderContext,
			});
			resettableClassFactory = resettableClassFactoryDelegate();
			testBuilderContext = new();
			testBuilderContextAccessor.Current = testBuilderContext;
		}
		catch (global::System.Exception exception)
		{
			nodes.Add(new FailedInitializationTest
			{
				TestId = $"global::TUnit.Core.MethodDataSourceAttribute:{testMethodDataIndex}:TL-MDS0:TUnit.TestProject.MethodDataSourceDrivenTests.DataSource_WithBaseReturn(TUnit.TestProject.MethodDataSourceDrivenTests.BaseValue):0",
				TestClass = typeof(global::TUnit.TestProject.MethodDataSourceDrivenTests),
				ReturnType = ((Action<global::TUnit.TestProject.MethodDataSourceDrivenTests, global::TUnit.TestProject.MethodDataSourceDrivenTests.BaseValue>)((global::TUnit.TestProject.MethodDataSourceDrivenTests a0, global::TUnit.TestProject.MethodDataSourceDrivenTests.BaseValue a1) => a0.DataSource_WithBaseReturn(a1))).Method.ReturnType,
				ParameterTypeFullNames = [typeof(global::TUnit.TestProject.MethodDataSourceDrivenTests.BaseValue)],
				TestName = "DataSource_WithBaseReturn",
				TestFilePath = @"",
				TestLineNumber = 52,
				Exception = exception,
			});
		}
		return nodes;
	}
}

  
// <auto-generated/>
#pragma warning disable
using global::System.Linq;
using global::System.Reflection;
using global::TUnit.Core;
using global::TUnit.Core.Extensions;

namespace TUnit.SourceGenerated;

[global::System.Diagnostics.StackTraceHidden]
[global::System.Diagnostics.CodeAnalysis.ExcludeFromCodeCoverage]
file partial class MethodDataSourceDrivenTests : TUnit.Core.Interfaces.SourceGenerator.ITestSource
{
	[global::System.Runtime.CompilerServices.ModuleInitializer]
	public static void Initialise()
	{
		SourceRegistrar.Register(new MethodDataSourceDrivenTests());
	}
	public global::System.Collections.Generic.IReadOnlyList<SourceGeneratedTestNode> CollectTests(string sessionId)
	{
		return Tests0(sessionId);
	}
	private global::System.Collections.Generic.List<SourceGeneratedTestNode> Tests0(string sessionId)
	{
		global::System.Collections.Generic.List<SourceGeneratedTestNode> nodes = [];
		var classDataIndex = 0;
		var testMethodDataIndex = 0;
		try
		{
			var testClassType = typeof(global::TUnit.TestProject.MethodDataSourceDrivenTests);
			var methodInfo = ((Action<global::TUnit.TestProject.MethodDataSourceDrivenTests, global::System.String[]>)((global::TUnit.TestProject.MethodDataSourceDrivenTests a0, global::System.String[] a1) => a0.EnumerableFuncArrayTest(a1))).Method;

			var testBuilderContext = new global::TUnit.Core.TestBuilderContext();
			var testBuilderContextAccessor = new global::TUnit.Core.TestBuilderContextAccessor(testBuilderContext);
			foreach (var methodDataAccessor in global::TUnit.TestProject.MethodDataSourceDrivenTests.EnumerableFuncArrayTestData())
			{
				testMethodDataIndex++;

				var methodData = methodDataAccessor();
				var resettableClassFactoryDelegate = () => new ResettableLazy<global::TUnit.TestProject.MethodDataSourceDrivenTests>(() => 
				new global::TUnit.TestProject.MethodDataSourceDrivenTests()
				, sessionId, testBuilderContext);

				var resettableClassFactory = resettableClassFactoryDelegate();

				nodes.Add(new TestMetadata<global::TUnit.TestProject.MethodDataSourceDrivenTests>
				{
					TestId = $"global::TUnit.Core.MethodDataSourceAttribute:{testMethodDataIndex}:TL-EMDS0:{testMethodDataIndex}:TUnit.TestProject.MethodDataSourceDrivenTests.EnumerableFuncArrayTest(System.String[]):0",
					TestClassArguments = [],
					TestMethodArguments = [methodData],
					TestClassProperties = [],
					CurrentRepeatAttempt = 0,
					RepeatLimit = 0,
					MethodInfo = methodInfo,
					ResettableClassFactory = resettableClassFactory,
					TestMethodFactory = (classInstance, cancellationToken) => AsyncConvert.Convert(() => classInstance.EnumerableFuncArrayTest(methodData)),
					TestFilePath = @"",
					TestLineNumber = 58,
					AttributeTypes = [ typeof(global::TUnit.Core.TestAttribute) ],
					DataAttributes = [  ],
					TestBuilderContext = testBuilderContext,
				});
				resettableClassFactory = resettableClassFactoryDelegate();
				testBuilderContext = new();
				testBuilderContextAccessor.Current = testBuilderContext;
			}
		}
		catch (global::System.Exception exception)
		{
			nodes.Add(new FailedInitializationTest
			{
				TestId = $"global::TUnit.Core.MethodDataSourceAttribute:{testMethodDataIndex}:TL-EMDS0:{testMethodDataIndex}:TUnit.TestProject.MethodDataSourceDrivenTests.EnumerableFuncArrayTest(System.String[]):0",
				TestClass = typeof(global::TUnit.TestProject.MethodDataSourceDrivenTests),
				ReturnType = ((Action<global::TUnit.TestProject.MethodDataSourceDrivenTests, global::System.String[]>)((global::TUnit.TestProject.MethodDataSourceDrivenTests a0, global::System.String[] a1) => a0.EnumerableFuncArrayTest(a1))).Method.ReturnType,
				ParameterTypeFullNames = [typeof(global::System.String[])],
				TestName = "EnumerableFuncArrayTest",
				TestFilePath = @"",
				TestLineNumber = 58,
				Exception = exception,
			});
		}
		return nodes;
	}
}

]