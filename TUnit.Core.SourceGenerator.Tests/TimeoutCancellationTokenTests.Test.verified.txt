[  
// <auto-generated/>
#pragma warning disable
using global::System.Linq;
using global::System.Reflection;
using global::TUnit.Core;
using global::TUnit.Core.Extensions;

namespace TUnit.SourceGenerated;

[global::System.Diagnostics.StackTraceHidden]
[global::System.Diagnostics.CodeAnalysis.ExcludeFromCodeCoverage]
file partial class TimeoutCancellationTokenTests : TUnit.Core.Interfaces.SourceGenerator.ITestSource
{
	[global::System.Runtime.CompilerServices.ModuleInitializer]
	public static void Initialise()
	{
		SourceRegistrar.Register(new TimeoutCancellationTokenTests());
	}
	public global::System.Collections.Generic.IReadOnlyList<SourceGeneratedTestNode> CollectTests(string sessionId)
	{
		return Tests0(sessionId);
	}
	private global::System.Collections.Generic.List<SourceGeneratedTestNode> Tests0(string sessionId)
	{
		global::System.Collections.Generic.List<SourceGeneratedTestNode> nodes = [];
		var classDataIndex = 0;
		var testMethodDataIndex = 0;
		try
		{
			var testClassType = typeof(global::TUnit.TestProject.TimeoutCancellationTokenTests);
			var methodInfo = ((Action<global::TUnit.TestProject.TimeoutCancellationTokenTests, global::System.Threading.CancellationToken>)((global::TUnit.TestProject.TimeoutCancellationTokenTests a0, global::System.Threading.CancellationToken a1) => a0.DefaultTest(a1))).Method;

			var testBuilderContext = new global::TUnit.Core.TestBuilderContext();
			var testBuilderContextAccessor = new global::TUnit.Core.TestBuilderContextAccessor(testBuilderContext);
			global::System.Int32 classArg = global::TUnit.TestProject.TimeoutCancellationTokenTests.DataSource();

			var resettableClassFactoryDelegate = () => new ResettableLazy<global::TUnit.TestProject.TimeoutCancellationTokenTests>(() => 
			new global::TUnit.TestProject.TimeoutCancellationTokenTests(classArg)
			, sessionId, testBuilderContext);

			var resettableClassFactory = resettableClassFactoryDelegate();

			nodes.Add(new TestMetadata<global::TUnit.TestProject.TimeoutCancellationTokenTests>
			{
				TestId = $"global::TUnit.Core.MethodDataSourceAttribute:{classDataIndex}:CL-MDS0:TUnit.TestProject.TimeoutCancellationTokenTests(System.Int32).DefaultTest(System.Threading.CancellationToken):0",
				TestClassArguments = [classArg],
				TestMethodArguments = [],
				TestClassProperties = [],
				CurrentRepeatAttempt = 0,
				RepeatLimit = 0,
				MethodInfo = methodInfo,
				ResettableClassFactory = resettableClassFactory,
				TestMethodFactory = (classInstance, cancellationToken) => AsyncConvert.Convert(() => classInstance.DefaultTest(cancellationToken)),
				TestFilePath = @"",
				TestLineNumber = 15,
				AttributeTypes = [ typeof(global::TUnit.Core.TestAttribute), typeof(global::TUnit.Core.CategoryAttribute) ],
				DataAttributes = [  ],
				TestBuilderContext = testBuilderContext,
			});
			resettableClassFactory = resettableClassFactoryDelegate();
			testBuilderContext = new();
			testBuilderContextAccessor.Current = testBuilderContext;
		}
		catch (global::System.Exception exception)
		{
			nodes.Add(new FailedInitializationTest
			{
				TestId = $"global::TUnit.Core.MethodDataSourceAttribute:{classDataIndex}:CL-MDS0:TUnit.TestProject.TimeoutCancellationTokenTests(System.Int32).DefaultTest(System.Threading.CancellationToken):0",
				TestClass = typeof(global::TUnit.TestProject.TimeoutCancellationTokenTests),
				ReturnType = ((Action<global::TUnit.TestProject.TimeoutCancellationTokenTests, global::System.Threading.CancellationToken>)((global::TUnit.TestProject.TimeoutCancellationTokenTests a0, global::System.Threading.CancellationToken a1) => a0.DefaultTest(a1))).Method.ReturnType,
				ParameterTypeFullNames = [typeof(global::System.Threading.CancellationToken)],
				TestName = "DefaultTest",
				TestFilePath = @"",
				TestLineNumber = 15,
				Exception = exception,
			});
		}
		return nodes;
	}
}

  
// <auto-generated/>
#pragma warning disable
using global::System.Linq;
using global::System.Reflection;
using global::TUnit.Core;
using global::TUnit.Core.Extensions;

namespace TUnit.SourceGenerated;

[global::System.Diagnostics.StackTraceHidden]
[global::System.Diagnostics.CodeAnalysis.ExcludeFromCodeCoverage]
file partial class TimeoutCancellationTokenTests : TUnit.Core.Interfaces.SourceGenerator.ITestSource
{
	[global::System.Runtime.CompilerServices.ModuleInitializer]
	public static void Initialise()
	{
		SourceRegistrar.Register(new TimeoutCancellationTokenTests());
	}
	public global::System.Collections.Generic.IReadOnlyList<SourceGeneratedTestNode> CollectTests(string sessionId)
	{
		return Tests0(sessionId);
	}
	private global::System.Collections.Generic.List<SourceGeneratedTestNode> Tests0(string sessionId)
	{
		global::System.Collections.Generic.List<SourceGeneratedTestNode> nodes = [];
		var classDataIndex = 0;
		var testMethodDataIndex = 0;
		try
		{
			var testClassType = typeof(global::TUnit.TestProject.TimeoutCancellationTokenTests);
			var methodInfo = ((Action<global::TUnit.TestProject.TimeoutCancellationTokenTests, global::System.Threading.CancellationToken>)((global::TUnit.TestProject.TimeoutCancellationTokenTests a0, global::System.Threading.CancellationToken a1) => a0.BasicTest(a1))).Method;

			var testBuilderContext = new global::TUnit.Core.TestBuilderContext();
			var testBuilderContextAccessor = new global::TUnit.Core.TestBuilderContextAccessor(testBuilderContext);
			global::System.Int32 classArg = global::TUnit.TestProject.TimeoutCancellationTokenTests.DataSource();

			var resettableClassFactoryDelegate = () => new ResettableLazy<global::TUnit.TestProject.TimeoutCancellationTokenTests>(() => 
			new global::TUnit.TestProject.TimeoutCancellationTokenTests(classArg)
			, sessionId, testBuilderContext);

			var resettableClassFactory = resettableClassFactoryDelegate();

			nodes.Add(new TestMetadata<global::TUnit.TestProject.TimeoutCancellationTokenTests>
			{
				TestId = $"global::TUnit.Core.MethodDataSourceAttribute:{classDataIndex}:CL-MDS0:TUnit.TestProject.TimeoutCancellationTokenTests(System.Int32).BasicTest(System.Threading.CancellationToken):0",
				TestClassArguments = [classArg],
				TestMethodArguments = [],
				TestClassProperties = [],
				CurrentRepeatAttempt = 0,
				RepeatLimit = 0,
				MethodInfo = methodInfo,
				ResettableClassFactory = resettableClassFactory,
				TestMethodFactory = (classInstance, cancellationToken) => AsyncConvert.Convert(() => classInstance.BasicTest(cancellationToken)),
				TestFilePath = @"",
				TestLineNumber = 21,
				AttributeTypes = [ typeof(global::TUnit.Core.TestAttribute), typeof(global::TUnit.Core.TimeoutAttribute), typeof(global::TUnit.Core.CategoryAttribute) ],
				DataAttributes = [  ],
				TestBuilderContext = testBuilderContext,
			});
			resettableClassFactory = resettableClassFactoryDelegate();
			testBuilderContext = new();
			testBuilderContextAccessor.Current = testBuilderContext;
		}
		catch (global::System.Exception exception)
		{
			nodes.Add(new FailedInitializationTest
			{
				TestId = $"global::TUnit.Core.MethodDataSourceAttribute:{classDataIndex}:CL-MDS0:TUnit.TestProject.TimeoutCancellationTokenTests(System.Int32).BasicTest(System.Threading.CancellationToken):0",
				TestClass = typeof(global::TUnit.TestProject.TimeoutCancellationTokenTests),
				ReturnType = ((Action<global::TUnit.TestProject.TimeoutCancellationTokenTests, global::System.Threading.CancellationToken>)((global::TUnit.TestProject.TimeoutCancellationTokenTests a0, global::System.Threading.CancellationToken a1) => a0.BasicTest(a1))).Method.ReturnType,
				ParameterTypeFullNames = [typeof(global::System.Threading.CancellationToken)],
				TestName = "BasicTest",
				TestFilePath = @"",
				TestLineNumber = 21,
				Exception = exception,
			});
		}
		return nodes;
	}
}

  
// <auto-generated/>
#pragma warning disable
using global::System.Linq;
using global::System.Reflection;
using global::TUnit.Core;
using global::TUnit.Core.Extensions;

namespace TUnit.SourceGenerated;

[global::System.Diagnostics.StackTraceHidden]
[global::System.Diagnostics.CodeAnalysis.ExcludeFromCodeCoverage]
file partial class TimeoutCancellationTokenTests : TUnit.Core.Interfaces.SourceGenerator.ITestSource
{
	[global::System.Runtime.CompilerServices.ModuleInitializer]
	public static void Initialise()
	{
		SourceRegistrar.Register(new TimeoutCancellationTokenTests());
	}
	public global::System.Collections.Generic.IReadOnlyList<SourceGeneratedTestNode> CollectTests(string sessionId)
	{
		return Tests0(sessionId);
	}
	private global::System.Collections.Generic.List<SourceGeneratedTestNode> Tests0(string sessionId)
	{
		global::System.Collections.Generic.List<SourceGeneratedTestNode> nodes = [];
		var classDataIndex = 0;
		var testMethodDataIndex = 0;
		try
		{
			var testClassType = typeof(global::TUnit.TestProject.TimeoutCancellationTokenTests);
			var methodInfo = ((Action<global::TUnit.TestProject.TimeoutCancellationTokenTests, global::System.Threading.CancellationToken>)((global::TUnit.TestProject.TimeoutCancellationTokenTests a0, global::System.Threading.CancellationToken a1) => a0.InheritedTimeoutAttribute(a1))).Method;

			var testBuilderContext = new global::TUnit.Core.TestBuilderContext();
			var testBuilderContextAccessor = new global::TUnit.Core.TestBuilderContextAccessor(testBuilderContext);
			global::System.Int32 classArg = global::TUnit.TestProject.TimeoutCancellationTokenTests.DataSource();

			var resettableClassFactoryDelegate = () => new ResettableLazy<global::TUnit.TestProject.TimeoutCancellationTokenTests>(() => 
			new global::TUnit.TestProject.TimeoutCancellationTokenTests(classArg)
			, sessionId, testBuilderContext);

			var resettableClassFactory = resettableClassFactoryDelegate();

			nodes.Add(new TestMetadata<global::TUnit.TestProject.TimeoutCancellationTokenTests>
			{
				TestId = $"global::TUnit.Core.MethodDataSourceAttribute:{classDataIndex}:CL-MDS0:TUnit.TestProject.TimeoutCancellationTokenTests(System.Int32).InheritedTimeoutAttribute(System.Threading.CancellationToken):0",
				TestClassArguments = [classArg],
				TestMethodArguments = [],
				TestClassProperties = [],
				CurrentRepeatAttempt = 0,
				RepeatLimit = 0,
				MethodInfo = methodInfo,
				ResettableClassFactory = resettableClassFactory,
				TestMethodFactory = (classInstance, cancellationToken) => AsyncConvert.Convert(() => classInstance.InheritedTimeoutAttribute(cancellationToken)),
				TestFilePath = @"",
				TestLineNumber = 29,
				AttributeTypes = [ typeof(global::TUnit.Core.TestAttribute), typeof(global::TUnit.TestProject.TimeoutCancellationTokenTests.FiveSecondTimeout), typeof(global::TUnit.Core.CategoryAttribute) ],
				DataAttributes = [  ],
				TestBuilderContext = testBuilderContext,
			});
			resettableClassFactory = resettableClassFactoryDelegate();
			testBuilderContext = new();
			testBuilderContextAccessor.Current = testBuilderContext;
		}
		catch (global::System.Exception exception)
		{
			nodes.Add(new FailedInitializationTest
			{
				TestId = $"global::TUnit.Core.MethodDataSourceAttribute:{classDataIndex}:CL-MDS0:TUnit.TestProject.TimeoutCancellationTokenTests(System.Int32).InheritedTimeoutAttribute(System.Threading.CancellationToken):0",
				TestClass = typeof(global::TUnit.TestProject.TimeoutCancellationTokenTests),
				ReturnType = ((Action<global::TUnit.TestProject.TimeoutCancellationTokenTests, global::System.Threading.CancellationToken>)((global::TUnit.TestProject.TimeoutCancellationTokenTests a0, global::System.Threading.CancellationToken a1) => a0.InheritedTimeoutAttribute(a1))).Method.ReturnType,
				ParameterTypeFullNames = [typeof(global::System.Threading.CancellationToken)],
				TestName = "InheritedTimeoutAttribute",
				TestFilePath = @"",
				TestLineNumber = 29,
				Exception = exception,
			});
		}
		return nodes;
	}
}

  
// <auto-generated/>
#pragma warning disable
using global::System.Linq;
using global::System.Reflection;
using global::TUnit.Core;
using global::TUnit.Core.Extensions;

namespace TUnit.SourceGenerated;

[global::System.Diagnostics.StackTraceHidden]
[global::System.Diagnostics.CodeAnalysis.ExcludeFromCodeCoverage]
file partial class TimeoutCancellationTokenTests : TUnit.Core.Interfaces.SourceGenerator.ITestSource
{
	[global::System.Runtime.CompilerServices.ModuleInitializer]
	public static void Initialise()
	{
		SourceRegistrar.Register(new TimeoutCancellationTokenTests());
	}
	public global::System.Collections.Generic.IReadOnlyList<SourceGeneratedTestNode> CollectTests(string sessionId)
	{
		return Tests0(sessionId);
	}
	private global::System.Collections.Generic.List<SourceGeneratedTestNode> Tests0(string sessionId)
	{
		global::System.Collections.Generic.List<SourceGeneratedTestNode> nodes = [];
		var classDataIndex = 0;
		var testMethodDataIndex = 0;
		try
		{
			var testClassType = typeof(global::TUnit.TestProject.TimeoutCancellationTokenTests);
			var methodInfo = ((Action<global::TUnit.TestProject.TimeoutCancellationTokenTests, global::System.Int32, global::System.Threading.CancellationToken>)((global::TUnit.TestProject.TimeoutCancellationTokenTests a0, global::System.Int32 a1, global::System.Threading.CancellationToken a2) => a0.DataTest(a1, a2))).Method;

			var testBuilderContext = new global::TUnit.Core.TestBuilderContext();
			var testBuilderContextAccessor = new global::TUnit.Core.TestBuilderContextAccessor(testBuilderContext);
			global::System.Int32 classArg = global::TUnit.TestProject.TimeoutCancellationTokenTests.DataSource();

			global::System.Int32 methodArg = 1;

			var resettableClassFactoryDelegate = () => new ResettableLazy<global::TUnit.TestProject.TimeoutCancellationTokenTests>(() => 
			new global::TUnit.TestProject.TimeoutCancellationTokenTests(classArg)
			, sessionId, testBuilderContext);

			var resettableClassFactory = resettableClassFactoryDelegate();

			nodes.Add(new TestMetadata<global::TUnit.TestProject.TimeoutCancellationTokenTests>
			{
				TestId = $"global::TUnit.Core.MethodDataSourceAttribute:{classDataIndex}:CL-MDS0:global::TUnit.Core.ArgumentsAttribute:{testMethodDataIndex}:TL-ARGS0:TUnit.TestProject.TimeoutCancellationTokenTests(System.Int32).DataTest(System.Int32,System.Threading.CancellationToken):0",
				TestClassArguments = [classArg],
				TestMethodArguments = [methodArg],
				TestClassProperties = [],
				CurrentRepeatAttempt = 0,
				RepeatLimit = 0,
				MethodInfo = methodInfo,
				ResettableClassFactory = resettableClassFactory,
				TestMethodFactory = (classInstance, cancellationToken) => AsyncConvert.Convert(() => classInstance.DataTest(methodArg, cancellationToken)),
				TestFilePath = @"",
				TestLineNumber = 36,
				AttributeTypes = [ typeof(global::TUnit.Core.TestAttribute), typeof(global::TUnit.Core.TimeoutAttribute), typeof(global::TUnit.Core.CategoryAttribute) ],
				DataAttributes = [  ],
				TestBuilderContext = testBuilderContext,
			});
			resettableClassFactory = resettableClassFactoryDelegate();
			testBuilderContext = new();
			testBuilderContextAccessor.Current = testBuilderContext;
		}
		catch (global::System.Exception exception)
		{
			nodes.Add(new FailedInitializationTest
			{
				TestId = $"global::TUnit.Core.MethodDataSourceAttribute:{classDataIndex}:CL-MDS0:global::TUnit.Core.ArgumentsAttribute:{testMethodDataIndex}:TL-ARGS0:TUnit.TestProject.TimeoutCancellationTokenTests(System.Int32).DataTest(System.Int32,System.Threading.CancellationToken):0",
				TestClass = typeof(global::TUnit.TestProject.TimeoutCancellationTokenTests),
				ReturnType = ((Action<global::TUnit.TestProject.TimeoutCancellationTokenTests, global::System.Int32, global::System.Threading.CancellationToken>)((global::TUnit.TestProject.TimeoutCancellationTokenTests a0, global::System.Int32 a1, global::System.Threading.CancellationToken a2) => a0.DataTest(a1, a2))).Method.ReturnType,
				ParameterTypeFullNames = [typeof(global::System.Int32), typeof(global::System.Threading.CancellationToken)],
				TestName = "DataTest",
				TestFilePath = @"",
				TestLineNumber = 36,
				Exception = exception,
			});
		}
		return nodes;
	}
}

  
// <auto-generated/>
#pragma warning disable
using global::System.Linq;
using global::System.Reflection;
using global::TUnit.Core;
using global::TUnit.Core.Extensions;

namespace TUnit.SourceGenerated;

[global::System.Diagnostics.StackTraceHidden]
[global::System.Diagnostics.CodeAnalysis.ExcludeFromCodeCoverage]
file partial class TimeoutCancellationTokenTests : TUnit.Core.Interfaces.SourceGenerator.ITestSource
{
	[global::System.Runtime.CompilerServices.ModuleInitializer]
	public static void Initialise()
	{
		SourceRegistrar.Register(new TimeoutCancellationTokenTests());
	}
	public global::System.Collections.Generic.IReadOnlyList<SourceGeneratedTestNode> CollectTests(string sessionId)
	{
		return Tests0(sessionId);
	}
	private global::System.Collections.Generic.List<SourceGeneratedTestNode> Tests0(string sessionId)
	{
		global::System.Collections.Generic.List<SourceGeneratedTestNode> nodes = [];
		var classDataIndex = 0;
		var testMethodDataIndex = 0;
		try
		{
			var testClassType = typeof(global::TUnit.TestProject.TimeoutCancellationTokenTests);
			var methodInfo = ((Action<global::TUnit.TestProject.TimeoutCancellationTokenTests, global::System.Int32, global::System.Threading.CancellationToken>)((global::TUnit.TestProject.TimeoutCancellationTokenTests a0, global::System.Int32 a1, global::System.Threading.CancellationToken a2) => a0.DataSourceTest(a1, a2))).Method;

			var testBuilderContext = new global::TUnit.Core.TestBuilderContext();
			var testBuilderContextAccessor = new global::TUnit.Core.TestBuilderContextAccessor(testBuilderContext);
			global::System.Int32 classArg = global::TUnit.TestProject.TimeoutCancellationTokenTests.DataSource();

			global::System.Int32 methodArg = global::TUnit.TestProject.TimeoutCancellationTokenTests.DataSource();
			var resettableClassFactoryDelegate = () => new ResettableLazy<global::TUnit.TestProject.TimeoutCancellationTokenTests>(() => 
			new global::TUnit.TestProject.TimeoutCancellationTokenTests(classArg)
			, sessionId, testBuilderContext);

			var resettableClassFactory = resettableClassFactoryDelegate();

			nodes.Add(new TestMetadata<global::TUnit.TestProject.TimeoutCancellationTokenTests>
			{
				TestId = $"global::TUnit.Core.MethodDataSourceAttribute:{classDataIndex}:CL-MDS0:global::TUnit.Core.MethodDataSourceAttribute:{testMethodDataIndex}:TL-MDS0:TUnit.TestProject.TimeoutCancellationTokenTests(System.Int32).DataSourceTest(System.Int32,System.Threading.CancellationToken):0",
				TestClassArguments = [classArg],
				TestMethodArguments = [methodArg],
				TestClassProperties = [],
				CurrentRepeatAttempt = 0,
				RepeatLimit = 0,
				MethodInfo = methodInfo,
				ResettableClassFactory = resettableClassFactory,
				TestMethodFactory = (classInstance, cancellationToken) => AsyncConvert.Convert(() => classInstance.DataSourceTest(methodArg, cancellationToken)),
				TestFilePath = @"",
				TestLineNumber = 47,
				AttributeTypes = [ typeof(global::TUnit.Core.TimeoutAttribute), typeof(global::TUnit.Core.TestAttribute), typeof(global::TUnit.Core.CategoryAttribute) ],
				DataAttributes = [  ],
				TestBuilderContext = testBuilderContext,
			});
			resettableClassFactory = resettableClassFactoryDelegate();
			testBuilderContext = new();
			testBuilderContextAccessor.Current = testBuilderContext;
		}
		catch (global::System.Exception exception)
		{
			nodes.Add(new FailedInitializationTest
			{
				TestId = $"global::TUnit.Core.MethodDataSourceAttribute:{classDataIndex}:CL-MDS0:global::TUnit.Core.MethodDataSourceAttribute:{testMethodDataIndex}:TL-MDS0:TUnit.TestProject.TimeoutCancellationTokenTests(System.Int32).DataSourceTest(System.Int32,System.Threading.CancellationToken):0",
				TestClass = typeof(global::TUnit.TestProject.TimeoutCancellationTokenTests),
				ReturnType = ((Action<global::TUnit.TestProject.TimeoutCancellationTokenTests, global::System.Int32, global::System.Threading.CancellationToken>)((global::TUnit.TestProject.TimeoutCancellationTokenTests a0, global::System.Int32 a1, global::System.Threading.CancellationToken a2) => a0.DataSourceTest(a1, a2))).Method.ReturnType,
				ParameterTypeFullNames = [typeof(global::System.Int32), typeof(global::System.Threading.CancellationToken)],
				TestName = "DataSourceTest",
				TestFilePath = @"",
				TestLineNumber = 47,
				Exception = exception,
			});
		}
		return nodes;
	}
}

  
// <auto-generated/>
#pragma warning disable
using global::System.Linq;
using global::System.Reflection;
using global::TUnit.Core;
using global::TUnit.Core.Extensions;

namespace TUnit.SourceGenerated;

[global::System.Diagnostics.StackTraceHidden]
[global::System.Diagnostics.CodeAnalysis.ExcludeFromCodeCoverage]
file partial class TimeoutCancellationTokenTests : TUnit.Core.Interfaces.SourceGenerator.ITestSource
{
	[global::System.Runtime.CompilerServices.ModuleInitializer]
	public static void Initialise()
	{
		SourceRegistrar.Register(new TimeoutCancellationTokenTests());
	}
	public global::System.Collections.Generic.IReadOnlyList<SourceGeneratedTestNode> CollectTests(string sessionId)
	{
		return
		[
			..Tests0(sessionId),
			..Tests1(sessionId),
			..Tests2(sessionId),
		];
	}
	private global::System.Collections.Generic.List<SourceGeneratedTestNode> Tests0(string sessionId)
	{
		global::System.Collections.Generic.List<SourceGeneratedTestNode> nodes = [];
		var classDataIndex = 0;
		var testMethodDataIndex = 0;
		try
		{
			var testClassType = typeof(global::TUnit.TestProject.TimeoutCancellationTokenTests);
			var methodInfo = ((Action<global::TUnit.TestProject.TimeoutCancellationTokenTests, global::System.Int32, global::System.Threading.CancellationToken>)((global::TUnit.TestProject.TimeoutCancellationTokenTests a0, global::System.Int32 a1, global::System.Threading.CancellationToken a2) => a0.MatrixTest(a1, a2))).Method;

			var testBuilderContext = new global::TUnit.Core.TestBuilderContext();
			var testBuilderContextAccessor = new global::TUnit.Core.TestBuilderContextAccessor(testBuilderContext);
			global::System.Int32 classArg = global::TUnit.TestProject.TimeoutCancellationTokenTests.DataSource();

			global::System.Int32 methodArg = 1;

			var resettableClassFactoryDelegate = () => new ResettableLazy<global::TUnit.TestProject.TimeoutCancellationTokenTests>(() => 
			new global::TUnit.TestProject.TimeoutCancellationTokenTests(classArg)
			, sessionId, testBuilderContext);

			var resettableClassFactory = resettableClassFactoryDelegate();

			nodes.Add(new TestMetadata<global::TUnit.TestProject.TimeoutCancellationTokenTests>
			{
				TestId = $"global::TUnit.Core.MethodDataSourceAttribute:{classDataIndex}:CL-MDS0:TL-ARGS0:TUnit.TestProject.TimeoutCancellationTokenTests(System.Int32).MatrixTest(System.Int32,System.Threading.CancellationToken):0",
				TestClassArguments = [classArg],
				TestMethodArguments = [methodArg],
				TestClassProperties = [],
				CurrentRepeatAttempt = 0,
				RepeatLimit = 0,
				MethodInfo = methodInfo,
				ResettableClassFactory = resettableClassFactory,
				TestMethodFactory = (classInstance, cancellationToken) => AsyncConvert.Convert(() => classInstance.MatrixTest(methodArg, cancellationToken)),
				TestFilePath = @"",
				TestLineNumber = 54,
				AttributeTypes = [ typeof(global::TUnit.Core.TestAttribute), typeof(global::TUnit.Core.TimeoutAttribute), typeof(global::TUnit.Core.CategoryAttribute) ],
				DataAttributes = [  ],
				TestBuilderContext = testBuilderContext,
			});
			resettableClassFactory = resettableClassFactoryDelegate();
			testBuilderContext = new();
			testBuilderContextAccessor.Current = testBuilderContext;
		}
		catch (global::System.Exception exception)
		{
			nodes.Add(new FailedInitializationTest
			{
				TestId = $"global::TUnit.Core.MethodDataSourceAttribute:{classDataIndex}:CL-MDS0:TL-ARGS0:TUnit.TestProject.TimeoutCancellationTokenTests(System.Int32).MatrixTest(System.Int32,System.Threading.CancellationToken):0",
				TestClass = typeof(global::TUnit.TestProject.TimeoutCancellationTokenTests),
				ReturnType = ((Action<global::TUnit.TestProject.TimeoutCancellationTokenTests, global::System.Int32, global::System.Threading.CancellationToken>)((global::TUnit.TestProject.TimeoutCancellationTokenTests a0, global::System.Int32 a1, global::System.Threading.CancellationToken a2) => a0.MatrixTest(a1, a2))).Method.ReturnType,
				ParameterTypeFullNames = [typeof(global::System.Int32), typeof(global::System.Threading.CancellationToken)],
				TestName = "MatrixTest",
				TestFilePath = @"",
				TestLineNumber = 54,
				Exception = exception,
			});
		}
		return nodes;
	}
	private global::System.Collections.Generic.List<SourceGeneratedTestNode> Tests1(string sessionId)
	{
		global::System.Collections.Generic.List<SourceGeneratedTestNode> nodes = [];
		var classDataIndex = 0;
		var testMethodDataIndex = 0;
		try
		{
			var testClassType = typeof(global::TUnit.TestProject.TimeoutCancellationTokenTests);
			var methodInfo = ((Action<global::TUnit.TestProject.TimeoutCancellationTokenTests, global::System.Int32, global::System.Threading.CancellationToken>)((global::TUnit.TestProject.TimeoutCancellationTokenTests a0, global::System.Int32 a1, global::System.Threading.CancellationToken a2) => a0.MatrixTest(a1, a2))).Method;

			var testBuilderContext = new global::TUnit.Core.TestBuilderContext();
			var testBuilderContextAccessor = new global::TUnit.Core.TestBuilderContextAccessor(testBuilderContext);
			global::System.Int32 classArg = global::TUnit.TestProject.TimeoutCancellationTokenTests.DataSource();

			global::System.Int32 methodArg = 2;

			var resettableClassFactoryDelegate = () => new ResettableLazy<global::TUnit.TestProject.TimeoutCancellationTokenTests>(() => 
			new global::TUnit.TestProject.TimeoutCancellationTokenTests(classArg)
			, sessionId, testBuilderContext);

			var resettableClassFactory = resettableClassFactoryDelegate();

			nodes.Add(new TestMetadata<global::TUnit.TestProject.TimeoutCancellationTokenTests>
			{
				TestId = $"global::TUnit.Core.MethodDataSourceAttribute:{classDataIndex}:CL-MDS0:TL-ARGS1:TUnit.TestProject.TimeoutCancellationTokenTests(System.Int32).MatrixTest(System.Int32,System.Threading.CancellationToken):0",
				TestClassArguments = [classArg],
				TestMethodArguments = [methodArg],
				TestClassProperties = [],
				CurrentRepeatAttempt = 0,
				RepeatLimit = 0,
				MethodInfo = methodInfo,
				ResettableClassFactory = resettableClassFactory,
				TestMethodFactory = (classInstance, cancellationToken) => AsyncConvert.Convert(() => classInstance.MatrixTest(methodArg, cancellationToken)),
				TestFilePath = @"",
				TestLineNumber = 54,
				AttributeTypes = [ typeof(global::TUnit.Core.TestAttribute), typeof(global::TUnit.Core.TimeoutAttribute), typeof(global::TUnit.Core.CategoryAttribute) ],
				DataAttributes = [  ],
				TestBuilderContext = testBuilderContext,
			});
			resettableClassFactory = resettableClassFactoryDelegate();
			testBuilderContext = new();
			testBuilderContextAccessor.Current = testBuilderContext;
		}
		catch (global::System.Exception exception)
		{
			nodes.Add(new FailedInitializationTest
			{
				TestId = $"global::TUnit.Core.MethodDataSourceAttribute:{classDataIndex}:CL-MDS0:TL-ARGS1:TUnit.TestProject.TimeoutCancellationTokenTests(System.Int32).MatrixTest(System.Int32,System.Threading.CancellationToken):0",
				TestClass = typeof(global::TUnit.TestProject.TimeoutCancellationTokenTests),
				ReturnType = ((Action<global::TUnit.TestProject.TimeoutCancellationTokenTests, global::System.Int32, global::System.Threading.CancellationToken>)((global::TUnit.TestProject.TimeoutCancellationTokenTests a0, global::System.Int32 a1, global::System.Threading.CancellationToken a2) => a0.MatrixTest(a1, a2))).Method.ReturnType,
				ParameterTypeFullNames = [typeof(global::System.Int32), typeof(global::System.Threading.CancellationToken)],
				TestName = "MatrixTest",
				TestFilePath = @"",
				TestLineNumber = 54,
				Exception = exception,
			});
		}
		return nodes;
	}
	private global::System.Collections.Generic.List<SourceGeneratedTestNode> Tests2(string sessionId)
	{
		global::System.Collections.Generic.List<SourceGeneratedTestNode> nodes = [];
		var classDataIndex = 0;
		var testMethodDataIndex = 0;
		try
		{
			var testClassType = typeof(global::TUnit.TestProject.TimeoutCancellationTokenTests);
			var methodInfo = ((Action<global::TUnit.TestProject.TimeoutCancellationTokenTests, global::System.Int32, global::System.Threading.CancellationToken>)((global::TUnit.TestProject.TimeoutCancellationTokenTests a0, global::System.Int32 a1, global::System.Threading.CancellationToken a2) => a0.MatrixTest(a1, a2))).Method;

			var testBuilderContext = new global::TUnit.Core.TestBuilderContext();
			var testBuilderContextAccessor = new global::TUnit.Core.TestBuilderContextAccessor(testBuilderContext);
			global::System.Int32 classArg = global::TUnit.TestProject.TimeoutCancellationTokenTests.DataSource();

			global::System.Int32 methodArg = 3;

			var resettableClassFactoryDelegate = () => new ResettableLazy<global::TUnit.TestProject.TimeoutCancellationTokenTests>(() => 
			new global::TUnit.TestProject.TimeoutCancellationTokenTests(classArg)
			, sessionId, testBuilderContext);

			var resettableClassFactory = resettableClassFactoryDelegate();

			nodes.Add(new TestMetadata<global::TUnit.TestProject.TimeoutCancellationTokenTests>
			{
				TestId = $"global::TUnit.Core.MethodDataSourceAttribute:{classDataIndex}:CL-MDS0:TL-ARGS2:TUnit.TestProject.TimeoutCancellationTokenTests(System.Int32).MatrixTest(System.Int32,System.Threading.CancellationToken):0",
				TestClassArguments = [classArg],
				TestMethodArguments = [methodArg],
				TestClassProperties = [],
				CurrentRepeatAttempt = 0,
				RepeatLimit = 0,
				MethodInfo = methodInfo,
				ResettableClassFactory = resettableClassFactory,
				TestMethodFactory = (classInstance, cancellationToken) => AsyncConvert.Convert(() => classInstance.MatrixTest(methodArg, cancellationToken)),
				TestFilePath = @"",
				TestLineNumber = 54,
				AttributeTypes = [ typeof(global::TUnit.Core.TestAttribute), typeof(global::TUnit.Core.TimeoutAttribute), typeof(global::TUnit.Core.CategoryAttribute) ],
				DataAttributes = [  ],
				TestBuilderContext = testBuilderContext,
			});
			resettableClassFactory = resettableClassFactoryDelegate();
			testBuilderContext = new();
			testBuilderContextAccessor.Current = testBuilderContext;
		}
		catch (global::System.Exception exception)
		{
			nodes.Add(new FailedInitializationTest
			{
				TestId = $"global::TUnit.Core.MethodDataSourceAttribute:{classDataIndex}:CL-MDS0:TL-ARGS2:TUnit.TestProject.TimeoutCancellationTokenTests(System.Int32).MatrixTest(System.Int32,System.Threading.CancellationToken):0",
				TestClass = typeof(global::TUnit.TestProject.TimeoutCancellationTokenTests),
				ReturnType = ((Action<global::TUnit.TestProject.TimeoutCancellationTokenTests, global::System.Int32, global::System.Threading.CancellationToken>)((global::TUnit.TestProject.TimeoutCancellationTokenTests a0, global::System.Int32 a1, global::System.Threading.CancellationToken a2) => a0.MatrixTest(a1, a2))).Method.ReturnType,
				ParameterTypeFullNames = [typeof(global::System.Int32), typeof(global::System.Threading.CancellationToken)],
				TestName = "MatrixTest",
				TestFilePath = @"",
				TestLineNumber = 54,
				Exception = exception,
			});
		}
		return nodes;
	}
}

]